package com.hdu.edu.creditcertificatesystem.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class SciResearchContract extends Contract {
    public static final String BINARY = "608060405260028054905060035534801561001957600080fd5b5061269b806100296000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806353ed51431161007157806353ed51431461017657806359583c2a1461019457806365040aca146101b057806391c9b268146101cc578063a729d0de14610202578063ff9d284214610232576100a9565b806302bb88e2146100ae5780630d65f894146100de578063465c4105146100fa578063485c79471461012a57806353e4253f1461015a575b600080fd5b6100c860048036038101906100c39190611b61565b610262565b6040516100d59190611bc5565b60405180910390f35b6100f860048036038101906100f39190611d44565b610298565b005b610114600480360381019061010f9190611d8d565b61046f565b6040516101219190611bc5565b60405180910390f35b610144600480360381019061013f9190611e05565b61054c565b604051610151919061204f565b60405180910390f35b610174600480360381019061016f9190612071565b6109b9565b005b61017e610a93565b60405161018b919061204f565b60405180910390f35b6101ae60048036038101906101a99190612184565b610de1565b005b6101ca60048036038101906101c59190611d44565b61101a565b005b6101e660048036038101906101e19190611b61565b611259565b6040516101f99796959493929190612226565b60405180910390f35b61021c60048036038101906102179190611d44565b6114d1565b6040516102299190612362565b60405180910390f35b61024c60048036038101906102479190612071565b6117ae565b6040516102599190612384565b60405180910390f35b6001818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460ff1681565b600181600001516040516102ac91906123e2565b908152602001604051809103902060009054906101000a900460ff161561043357600080600183600001516040516102e491906123e2565b908152602001604051809103902060006101000a81548160ff021916908315150217905550600090505b6002805490508110156103ec576103cf826000015160028381548110610337576103366123f9565b5b90600052602060002001805461034c90612457565b80601f016020809104026020016040519081016040528092919081815260200182805461037890612457565b80156103c55780601f1061039a576101008083540402835291602001916103c5565b820191906000526020600020905b8154815290600101906020018083116103a857829003601f168201915b505050505061046f565b156103d9576103ec565b80806103e4906124b8565b91505061030e565b6103f5816109b9565b7fcdb72d06565be2e6e4048e127d72c0d6cd72635cbae3d499c02100a7cd5c0a8960016040516104259190611bc5565b60405180910390a15061046c565b7fcdb72d06565be2e6e4048e127d72c0d6cd72635cbae3d499c02100a7cd5c0a8960006040516104639190611bc5565b60405180910390a15b50565b6000808390506000839050805182511461048e57600092505050610546565b60005b825181101561053e578181815181106104ad576104ac6123f9565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168382815181106104ed576104ec6123f9565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461052b5760009350505050610546565b8080610536906124b8565b915050610491565b506001925050505b92915050565b6060600060028054905067ffffffffffffffff81111561056f5761056e611a36565b5b6040519080825280602002602001820160405280156105a857816020015b61059561185a565b81526020019060019003908161058d5790505b5090506000805b6002805490508110156108a5576000600282815481106105d2576105d16123f9565b5b906000526020600020016040516105e99190612595565b90815260200160405180910390206040518060e001604052908160008201805461061290612457565b80601f016020809104026020016040519081016040528092919081815260200182805461063e90612457565b801561068b5780601f106106605761010080835404028352916020019161068b565b820191906000526020600020905b81548152906001019060200180831161066e57829003601f168201915b505050505081526020016001820180546106a490612457565b80601f01602080910402602001604051908101604052809291908181526020018280546106d090612457565b801561071d5780601f106106f25761010080835404028352916020019161071d565b820191906000526020600020905b81548152906001019060200180831161070057829003601f168201915b5050505050815260200160028201805461073690612457565b80601f016020809104026020016040519081016040528092919081815260200182805461076290612457565b80156107af5780601f10610784576101008083540402835291602001916107af565b820191906000526020600020905b81548152906001019060200180831161079257829003601f168201915b5050505050815260200160038201548152602001600482015481526020016005820180546107dc90612457565b80601f016020809104026020016040519081016040528092919081815260200182805461080890612457565b80156108555780601f1061082a57610100808354040283529160200191610855565b820191906000526020600020905b81548152906001019060200180831161083857829003601f168201915b50505050508152602001600682015481525050838380610874906124b8565b945081518110610887576108866123f9565b5b6020026020010181905250808061089d906124b8565b9150506105af565b50848410156108b55750506109b3565b6001816108c291906125ac565b8411156108d9576001816108d691906125ac565b93505b600185856108e791906125ac565b6108f191906125e0565b67ffffffffffffffff81111561090a57610909611a36565b5b60405190808252806020026020018201604052801561094357816020015b61093061185a565b8152602001906001900390816109285790505b5092506000905060008590505b8481116109af5782818151811061096a576109696123f9565b5b602002602001015184838061097e906124b8565b945081518110610991576109906123f9565b5b602002602001018190525080806109a7906124b8565b915050610950565b5050505b92915050565b600060028054905090508082106109d05750610a90565b60008290505b6001826109e391906125ac565b811015610a5d5760026001826109f991906125e0565b81548110610a0a57610a096123f9565b5b9060005260206000200160028281548110610a2857610a276123f9565b5b90600052602060002001908054610a3e90612457565b610a49929190611897565b508080610a55906124b8565b9150506109d6565b506002805480610a7057610a6f612636565b5b600190038181906000526020600020016000610a8c9190611924565b9055505b50565b606060028054905067ffffffffffffffff811115610ab457610ab3611a36565b5b604051908082528060200260200182016040528015610aed57816020015b610ada61185a565b815260200190600190039081610ad25790505b50905060005b600280549050811015610ddd57600060028281548110610b1657610b156123f9565b5b90600052602060002001604051610b2d9190612595565b90815260200160405180910390206040518060e0016040529081600082018054610b5690612457565b80601f0160208091040260200160405190810160405280929190818152602001828054610b8290612457565b8015610bcf5780601f10610ba457610100808354040283529160200191610bcf565b820191906000526020600020905b815481529060010190602001808311610bb257829003601f168201915b50505050508152602001600182018054610be890612457565b80601f0160208091040260200160405190810160405280929190818152602001828054610c1490612457565b8015610c615780601f10610c3657610100808354040283529160200191610c61565b820191906000526020600020905b815481529060010190602001808311610c4457829003601f168201915b50505050508152602001600282018054610c7a90612457565b80601f0160208091040260200160405190810160405280929190818152602001828054610ca690612457565b8015610cf35780601f10610cc857610100808354040283529160200191610cf3565b820191906000526020600020905b815481529060010190602001808311610cd657829003601f168201915b505050505081526020016003820154815260200160048201548152602001600582018054610d2090612457565b80601f0160208091040260200160405190810160405280929190818152602001828054610d4c90612457565b8015610d995780601f10610d6e57610100808354040283529160200191610d99565b820191906000526020600020905b815481529060010190602001808311610d7c57829003601f168201915b50505050508152602001600682015481525050828281518110610dbf57610dbe6123f9565b5b60200260200101819052508080610dd5906124b8565b915050610af3565b5090565b60005b8151811015611016576001828281518110610e0257610e016123f9565b5b6020026020010151604051610e1791906123e2565b908152602001604051809103902060009054906101000a900460ff1615610fca576000806001848481518110610e5057610e4f6123f9565b5b6020026020010151604051610e6591906123e2565b908152602001604051809103902060006101000a81548160ff021916908315150217905550600090505b600280549050811015610f8357610f66838381518110610eb257610eb16123f9565b5b602002602001015160028381548110610ece57610ecd6123f9565b5b906000526020600020018054610ee390612457565b80601f0160208091040260200160405190810160405280929190818152602001828054610f0f90612457565b8015610f5c5780601f10610f3157610100808354040283529160200191610f5c565b820191906000526020600020905b815481529060010190602001808311610f3f57829003601f168201915b505050505061046f565b15610f7057610f83565b8080610f7b906124b8565b915050610e8f565b610f8c816109b9565b7fcdb72d06565be2e6e4048e127d72c0d6cd72635cbae3d499c02100a7cd5c0a896001604051610fbc9190611bc5565b60405180910390a150611003565b7fcdb72d06565be2e6e4048e127d72c0d6cd72635cbae3d499c02100a7cd5c0a896000604051610ffa9190611bc5565b60405180910390a15b808061100e906124b8565b915050610de4565b5050565b6001816000015160405161102e91906123e2565b908152602001604051809103902060009054906101000a900460ff1661119d57806000826000015160405161106391906123e2565b9081526020016040518091039020600082015181600001908051906020019061108d929190611964565b5060208201518160010190805190602001906110aa929190611964565b5060408201518160020190805190602001906110c7929190611964565b50606082015181600301556080820151816004015560a08201518160050190805190602001906110f8929190611964565b5060c08201518160060155905050600180826000015160405161111b91906123e2565b908152602001604051809103902060006101000a81548160ff0219169083151502179055506002816000015190806001815401808255809150506001900390600052602060002001600090919091909150908051906020019061117f929190611964565b5060036000815480929190611193906124b8565b9190505550611256565b80600082600001516040516111b291906123e2565b908152602001604051809103902060008201518160000190805190602001906111dc929190611964565b5060208201518160010190805190602001906111f9929190611964565b506040820151816002019080519060200190611216929190611964565b50606082015181600301556080820151816004015560a0820151816005019080519060200190611247929190611964565b5060c082015181600601559050505b50565b60008180516020810182018051848252602083016020850120818352809550505050505060009150905080600001805461129290612457565b80601f01602080910402602001604051908101604052809291908181526020018280546112be90612457565b801561130b5780601f106112e05761010080835404028352916020019161130b565b820191906000526020600020905b8154815290600101906020018083116112ee57829003601f168201915b50505050509080600101805461132090612457565b80601f016020809104026020016040519081016040528092919081815260200182805461134c90612457565b80156113995780601f1061136e57610100808354040283529160200191611399565b820191906000526020600020905b81548152906001019060200180831161137c57829003601f168201915b5050505050908060020180546113ae90612457565b80601f01602080910402602001604051908101604052809291908181526020018280546113da90612457565b80156114275780601f106113fc57610100808354040283529160200191611427565b820191906000526020600020905b81548152906001019060200180831161140a57829003601f168201915b50505050509080600301549080600401549080600501805461144890612457565b80601f016020809104026020016040519081016040528092919081815260200182805461147490612457565b80156114c15780601f10611496576101008083540402835291602001916114c1565b820191906000526020600020905b8154815290600101906020018083116114a457829003601f168201915b5050505050908060060154905087565b6114d961185a565b600182600001516040516114ed91906123e2565b908152602001604051809103902060009054906101000a900460ff16156117a8576000826000015160405161152291906123e2565b90815260200160405180910390206040518060e001604052908160008201805461154b90612457565b80601f016020809104026020016040519081016040528092919081815260200182805461157790612457565b80156115c45780601f10611599576101008083540402835291602001916115c4565b820191906000526020600020905b8154815290600101906020018083116115a757829003601f168201915b505050505081526020016001820180546115dd90612457565b80601f016020809104026020016040519081016040528092919081815260200182805461160990612457565b80156116565780601f1061162b57610100808354040283529160200191611656565b820191906000526020600020905b81548152906001019060200180831161163957829003601f168201915b5050505050815260200160028201805461166f90612457565b80601f016020809104026020016040519081016040528092919081815260200182805461169b90612457565b80156116e85780601f106116bd576101008083540402835291602001916116e8565b820191906000526020600020905b8154815290600101906020018083116116cb57829003601f168201915b50505050508152602001600382015481526020016004820154815260200160058201805461171590612457565b80601f016020809104026020016040519081016040528092919081815260200182805461174190612457565b801561178e5780601f106117635761010080835404028352916020019161178e565b820191906000526020600020905b81548152906001019060200180831161177157829003601f168201915b5050505050815260200160068201548152505090506117a9565b5b919050565b600281815481106117be57600080fd5b9060005260206000200160009150905080546117d990612457565b80601f016020809104026020016040519081016040528092919081815260200182805461180590612457565b80156118525780601f1061182757610100808354040283529160200191611852565b820191906000526020600020905b81548152906001019060200180831161183557829003601f168201915b505050505081565b6040518060e00160405280606081526020016060815260200160608152602001600081526020016000815260200160608152602001600081525090565b8280546118a390612457565b90600052602060002090601f0160209004810192826118c55760008555611913565b82601f106118d65780548555611913565b8280016001018555821561191357600052602060002091601f016020900482015b828111156119125782548255916001019190600101906118f7565b5b50905061192091906119ea565b5090565b50805461193090612457565b6000825580601f106119425750611961565b601f01602090049060005260206000209081019061196091906119ea565b5b50565b82805461197090612457565b90600052602060002090601f01602090048101928261199257600085556119d9565b82601f106119ab57805160ff19168380011785556119d9565b828001600101855582156119d9579182015b828111156119d85782518255916020019190600101906119bd565b5b5090506119e691906119ea565b5090565b5b80821115611a035760008160009055506001016119eb565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611a6e82611a25565b810181811067ffffffffffffffff82111715611a8d57611a8c611a36565b5b80604052505050565b6000611aa0611a07565b9050611aac8282611a65565b919050565b600067ffffffffffffffff821115611acc57611acb611a36565b5b611ad582611a25565b9050602081019050919050565b82818337600083830152505050565b6000611b04611aff84611ab1565b611a96565b905082815260208101848484011115611b2057611b1f611a20565b5b611b2b848285611ae2565b509392505050565b600082601f830112611b4857611b47611a1b565b5b8135611b58848260208601611af1565b91505092915050565b600060208284031215611b7757611b76611a11565b5b600082013567ffffffffffffffff811115611b9557611b94611a16565b5b611ba184828501611b33565b91505092915050565b60008115159050919050565b611bbf81611baa565b82525050565b6000602082019050611bda6000830184611bb6565b92915050565b600080fd5b600080fd5b6000819050919050565b611bfd81611bea565b8114611c0857600080fd5b50565b600081359050611c1a81611bf4565b92915050565b600060e08284031215611c3657611c35611be0565b5b611c4060e0611a96565b9050600082013567ffffffffffffffff811115611c6057611c5f611be5565b5b611c6c84828501611b33565b600083015250602082013567ffffffffffffffff811115611c9057611c8f611be5565b5b611c9c84828501611b33565b602083015250604082013567ffffffffffffffff811115611cc057611cbf611be5565b5b611ccc84828501611b33565b6040830152506060611ce084828501611c0b565b6060830152506080611cf484828501611c0b565b60808301525060a082013567ffffffffffffffff811115611d1857611d17611be5565b5b611d2484828501611b33565b60a08301525060c0611d3884828501611c0b565b60c08301525092915050565b600060208284031215611d5a57611d59611a11565b5b600082013567ffffffffffffffff811115611d7857611d77611a16565b5b611d8484828501611c20565b91505092915050565b60008060408385031215611da457611da3611a11565b5b600083013567ffffffffffffffff811115611dc257611dc1611a16565b5b611dce85828601611b33565b925050602083013567ffffffffffffffff811115611def57611dee611a16565b5b611dfb85828601611b33565b9150509250929050565b60008060408385031215611e1c57611e1b611a11565b5b6000611e2a85828601611c0b565b9250506020611e3b85828601611c0b565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611eab578082015181840152602081019050611e90565b83811115611eba576000848401525b50505050565b6000611ecb82611e71565b611ed58185611e7c565b9350611ee5818560208601611e8d565b611eee81611a25565b840191505092915050565b611f0281611bea565b82525050565b600060e0830160008301518482036000860152611f258282611ec0565b91505060208301518482036020860152611f3f8282611ec0565b91505060408301518482036040860152611f598282611ec0565b9150506060830151611f6e6060860182611ef9565b506080830151611f816080860182611ef9565b5060a083015184820360a0860152611f998282611ec0565b91505060c0830151611fae60c0860182611ef9565b508091505092915050565b6000611fc58383611f08565b905092915050565b6000602082019050919050565b6000611fe582611e45565b611fef8185611e50565b93508360208202850161200185611e61565b8060005b8581101561203d578484038952815161201e8582611fb9565b945061202983611fcd565b925060208a01995050600181019050612005565b50829750879550505050505092915050565b600060208201905081810360008301526120698184611fda565b905092915050565b60006020828403121561208757612086611a11565b5b600061209584828501611c0b565b91505092915050565b600067ffffffffffffffff8211156120b9576120b8611a36565b5b602082029050602081019050919050565b600080fd5b60006120e26120dd8461209e565b611a96565b90508083825260208201905060208402830185811115612105576121046120ca565b5b835b8181101561214c57803567ffffffffffffffff81111561212a57612129611a1b565b5b8086016121378982611b33565b85526020850194505050602081019050612107565b5050509392505050565b600082601f83011261216b5761216a611a1b565b5b813561217b8482602086016120cf565b91505092915050565b60006020828403121561219a57612199611a11565b5b600082013567ffffffffffffffff8111156121b8576121b7611a16565b5b6121c484828501612156565b91505092915050565b600082825260208201905092915050565b60006121e982611e71565b6121f381856121cd565b9350612203818560208601611e8d565b61220c81611a25565b840191505092915050565b61222081611bea565b82525050565b600060e0820190508181036000830152612240818a6121de565b9050818103602083015261225481896121de565b9050818103604083015261226881886121de565b90506122776060830187612217565b6122846080830186612217565b81810360a083015261229681856121de565b90506122a560c0830184612217565b98975050505050505050565b600060e08301600083015184820360008601526122ce8282611ec0565b915050602083015184820360208601526122e88282611ec0565b915050604083015184820360408601526123028282611ec0565b91505060608301516123176060860182611ef9565b50608083015161232a6080860182611ef9565b5060a083015184820360a08601526123428282611ec0565b91505060c083015161235760c0860182611ef9565b508091505092915050565b6000602082019050818103600083015261237c81846122b1565b905092915050565b6000602082019050818103600083015261239e81846121de565b905092915050565b600081905092915050565b60006123bc82611e71565b6123c681856123a6565b93506123d6818560208601611e8d565b80840191505092915050565b60006123ee82846123b1565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061246f57607f821691505b6020821081141561248357612482612428565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006124c382611bea565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156124f6576124f5612489565b5b600182019050919050565b60008190508160005260206000209050919050565b6000815461252381612457565b61252d81866123a6565b9450600182166000811461254857600181146125595761258c565b60ff1983168652818601935061258c565b61256285612501565b60005b8381101561258457815481890152600182019150602081019050612565565b838801955050505b50505092915050565b60006125a18284612516565b915081905092915050565b60006125b782611bea565b91506125c283611bea565b9250828210156125d5576125d4612489565b5b828203905092915050565b60006125eb82611bea565b91506125f683611bea565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561262b5761262a612489565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212203b8789fd6de4858f82c87b7c134d68f06bb0c3d02f0bceda972bdd99bf66677764736f6c634300080a0033";

    public static final String FUNC_BATCHDELETE = "batchDelete";

    public static final String FUNC_DELETEPROJECT = "deleteProject";

    public static final String FUNC_GETALL = "getAll";

    public static final String FUNC_GETENTITY = "getEntity";

    public static final String FUNC_GETLISTPAGE = "getListPage";

    public static final String FUNC_ISEQUAL = "isEqual";

    public static final String FUNC_PROJECTINSERTED = "projectInserted";

    public static final String FUNC_PROJECTKEY = "projectKey";

    public static final String FUNC_PROJECTS = "projects";

    public static final String FUNC_REMOVEPROJECTKEYATINDEX = "removeProjectKeyAtIndex";

    public static final String FUNC_SAVE = "save";

    public static final Event DELETEMSG_EVENT = new Event("DeleteMsg",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    @Deprecated
    protected SciResearchContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SciResearchContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SciResearchContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SciResearchContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<DeleteMsgEventResponse> getDeleteMsgEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DELETEMSG_EVENT, transactionReceipt);
        ArrayList<DeleteMsgEventResponse> responses = new ArrayList<DeleteMsgEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DeleteMsgEventResponse typedResponse = new DeleteMsgEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.code = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DeleteMsgEventResponse> deleteMsgEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DeleteMsgEventResponse>() {
            @Override
            public DeleteMsgEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DELETEMSG_EVENT, log);
                DeleteMsgEventResponse typedResponse = new DeleteMsgEventResponse();
                typedResponse.log = log;
                typedResponse.code = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DeleteMsgEventResponse> deleteMsgEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DELETEMSG_EVENT));
        return deleteMsgEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> batchDelete(List<String> idList) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BATCHDELETE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                        org.web3j.abi.datatypes.Utf8String.class,
                        org.web3j.abi.Utils.typeMap(idList, org.web3j.abi.datatypes.Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deleteProject(Project _project) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DELETEPROJECT,
                Arrays.<Type>asList(_project),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> getAll() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETALL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Project>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Project> getEntity(Project _project) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETENTITY,
                Arrays.<Type>asList(_project),
                Arrays.<TypeReference<?>>asList(new TypeReference<Project>() {}));
        return executeRemoteCallSingleValueReturn(function, Project.class);
    }

    public RemoteFunctionCall<List> getListPage(BigInteger begin, BigInteger end) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETLISTPAGE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(begin),
                        new org.web3j.abi.datatypes.generated.Uint256(end)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Project>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Boolean> isEqual(String a, String b) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISEQUAL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(a),
                        new org.web3j.abi.datatypes.Utf8String(b)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> projectInserted(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PROJECTINSERTED,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> projectKey(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PROJECTKEY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple7<String, String, String, BigInteger, BigInteger, String, BigInteger>> projects(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PROJECTS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple7<String, String, String, BigInteger, BigInteger, String, BigInteger>>(function,
                new Callable<Tuple7<String, String, String, BigInteger, BigInteger, String, BigInteger>>() {
                    @Override
                    public Tuple7<String, String, String, BigInteger, BigInteger, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, String, BigInteger, BigInteger, String, BigInteger>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (String) results.get(5).getValue(),
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> removeProjectKeyAtIndex(BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REMOVEPROJECTKEYATINDEX,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> save(Project _project) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAVE,
                Arrays.<Type>asList(_project),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static SciResearchContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SciResearchContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SciResearchContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SciResearchContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SciResearchContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SciResearchContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SciResearchContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SciResearchContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SciResearchContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SciResearchContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SciResearchContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SciResearchContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<SciResearchContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SciResearchContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SciResearchContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SciResearchContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class Project extends DynamicStruct {
        public String id;

        public String projectName;

        public String projectLevel;

        public BigInteger startTime;

        public BigInteger endTime;

        public String achievementPic;

        public BigInteger funds;

        public Project(String id, String projectName, String projectLevel, BigInteger startTime, BigInteger endTime, String achievementPic, BigInteger funds) {
            super(new org.web3j.abi.datatypes.Utf8String(id),new org.web3j.abi.datatypes.Utf8String(projectName),new org.web3j.abi.datatypes.Utf8String(projectLevel),new org.web3j.abi.datatypes.generated.Uint256(startTime),new org.web3j.abi.datatypes.generated.Uint256(endTime),new org.web3j.abi.datatypes.Utf8String(achievementPic),new org.web3j.abi.datatypes.generated.Uint256(funds));
            this.id = id;
            this.projectName = projectName;
            this.projectLevel = projectLevel;
            this.startTime = startTime;
            this.endTime = endTime;
            this.achievementPic = achievementPic;
            this.funds = funds;
        }

        public Project(Utf8String id, Utf8String projectName, Utf8String projectLevel, Uint256 startTime, Uint256 endTime, Utf8String achievementPic, Uint256 funds) {
            super(id,projectName,projectLevel,startTime,endTime,achievementPic,funds);
            this.id = id.getValue();
            this.projectName = projectName.getValue();
            this.projectLevel = projectLevel.getValue();
            this.startTime = startTime.getValue();
            this.endTime = endTime.getValue();
            this.achievementPic = achievementPic.getValue();
            this.funds = funds.getValue();
        }
    }

    public static class DeleteMsgEventResponse extends BaseEventResponse {
        public Boolean code;
    }
}
