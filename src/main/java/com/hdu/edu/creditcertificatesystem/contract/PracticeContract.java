package com.hdu.edu.creditcertificatesystem.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class PracticeContract extends Contract {
    public static final String BINARY = "608060405260028054905060035534801561001957600080fd5b5061239c806100296000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806353ed51431161007157806353ed51431461017657806359583c2a1461019457806362aadd1c146101b0578063955492c0146101e5578063b4b3015d14610201578063decf797814610231576100a9565b806329a4b85c146100ae5780632b81f1fc146100ca57806341f526dc146100e6578063465c410514610116578063485c794714610146575b600080fd5b6100c860048036038101906100c391906117cb565b610261565b005b6100e460048036038101906100df9190611a3c565b61033b565b005b61010060048036038101906100fb91906117cb565b610512565b60405161010d9190611b0d565b60405180910390f35b610130600480360381019061012b9190611b2f565b6105be565b60405161013d9190611bc2565b60405180910390f35b610160600480360381019061015b9190611bdd565b61069b565b60405161016d9190611dcf565b60405180910390f35b61017e610a76565b60405161018b9190611dcf565b60405180910390f35b6101ae60048036038101906101a99190611ed7565b610d32565b005b6101ca60048036038101906101c59190611f20565b610f6b565b6040516101dc96959493929190611f78565b60405180910390f35b6101ff60048036038101906101fa9190611a3c565b611155565b005b61021b60048036038101906102169190611a3c565b61135a565b6040516102289190612085565b60405180910390f35b61024b60048036038101906102469190611f20565b6115a5565b6040516102589190611bc2565b60405180910390f35b600060028054905090508082106102785750610338565b60008290505b60018261028b91906120d6565b8110156103055760026001826102a1919061210a565b815481106102b2576102b1612160565b5b90600052602060002001600282815481106102d0576102cf612160565b5b906000526020600020019080546102e6906121be565b6102f19291906115db565b5080806102fd906121f0565b91505061027e565b50600280548061031857610317612239565b5b6001900381819060005260206000200160006103349190611668565b9055505b50565b6001816000015160405161034f91906122a4565b908152602001604051809103902060009054906101000a900460ff16156104d6576000806001836000015160405161038791906122a4565b908152602001604051809103902060006101000a81548160ff021916908315150217905550600090505b60028054905081101561048f576104728260000151600283815481106103da576103d9612160565b5b9060005260206000200180546103ef906121be565b80601f016020809104026020016040519081016040528092919081815260200182805461041b906121be565b80156104685780601f1061043d57610100808354040283529160200191610468565b820191906000526020600020905b81548152906001019060200180831161044b57829003601f168201915b50505050506105be565b1561047c5761048f565b8080610487906121f0565b9150506103b1565b61049881610261565b7fcdb72d06565be2e6e4048e127d72c0d6cd72635cbae3d499c02100a7cd5c0a8960016040516104c89190611bc2565b60405180910390a15061050f565b7fcdb72d06565be2e6e4048e127d72c0d6cd72635cbae3d499c02100a7cd5c0a8960006040516105069190611bc2565b60405180910390a15b50565b6002818154811061052257600080fd5b90600052602060002001600091509050805461053d906121be565b80601f0160208091040260200160405190810160405280929190818152602001828054610569906121be565b80156105b65780601f1061058b576101008083540402835291602001916105b6565b820191906000526020600020905b81548152906001019060200180831161059957829003601f168201915b505050505081565b600080839050600083905080518251146105dd57600092505050610695565b60005b825181101561068d578181815181106105fc576105fb612160565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191683828151811061063c5761063b612160565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461067a5760009350505050610695565b8080610685906121f0565b9150506105e0565b506001925050505b92915050565b6060600060028054905067ffffffffffffffff8111156106be576106bd61180e565b5b6040519080825280602002602001820160405280156106f757816020015b6106e46116a8565b8152602001906001900390816106dc5790505b5090506000805b6002805490508110156109625760006002828154811061072157610720612160565b5b90600052602060002001604051610738919061234f565b90815260200160405180910390206040518060c0016040529081600082018054610761906121be565b80601f016020809104026020016040519081016040528092919081815260200182805461078d906121be565b80156107da5780601f106107af576101008083540402835291602001916107da565b820191906000526020600020905b8154815290600101906020018083116107bd57829003601f168201915b505050505081526020016001820180546107f3906121be565b80601f016020809104026020016040519081016040528092919081815260200182805461081f906121be565b801561086c5780601f106108415761010080835404028352916020019161086c565b820191906000526020600020905b81548152906001019060200180831161084f57829003601f168201915b50505050508152602001600282018054610885906121be565b80601f01602080910402602001604051908101604052809291908181526020018280546108b1906121be565b80156108fe5780601f106108d3576101008083540402835291602001916108fe565b820191906000526020600020905b8154815290600101906020018083116108e157829003601f168201915b505050505081526020016003820154815260200160048201548152602001600582015481525050838380610931906121f0565b94508151811061094457610943612160565b5b6020026020010181905250808061095a906121f0565b9150506106fe565b5084841015610972575050610a70565b60018161097f91906120d6565b8411156109965760018161099391906120d6565b93505b600185856109a491906120d6565b6109ae919061210a565b67ffffffffffffffff8111156109c7576109c661180e565b5b604051908082528060200260200182016040528015610a0057816020015b6109ed6116a8565b8152602001906001900390816109e55790505b5092506000905060008590505b848111610a6c57828181518110610a2757610a26612160565b5b6020026020010151848380610a3b906121f0565b945081518110610a4e57610a4d612160565b5b60200260200101819052508080610a64906121f0565b915050610a0d565b5050505b92915050565b606060028054905067ffffffffffffffff811115610a9757610a9661180e565b5b604051908082528060200260200182016040528015610ad057816020015b610abd6116a8565b815260200190600190039081610ab55790505b50905060005b600280549050811015610d2e57600060028281548110610af957610af8612160565b5b90600052602060002001604051610b10919061234f565b90815260200160405180910390206040518060c0016040529081600082018054610b39906121be565b80601f0160208091040260200160405190810160405280929190818152602001828054610b65906121be565b8015610bb25780601f10610b8757610100808354040283529160200191610bb2565b820191906000526020600020905b815481529060010190602001808311610b9557829003601f168201915b50505050508152602001600182018054610bcb906121be565b80601f0160208091040260200160405190810160405280929190818152602001828054610bf7906121be565b8015610c445780601f10610c1957610100808354040283529160200191610c44565b820191906000526020600020905b815481529060010190602001808311610c2757829003601f168201915b50505050508152602001600282018054610c5d906121be565b80601f0160208091040260200160405190810160405280929190818152602001828054610c89906121be565b8015610cd65780601f10610cab57610100808354040283529160200191610cd6565b820191906000526020600020905b815481529060010190602001808311610cb957829003601f168201915b505050505081526020016003820154815260200160048201548152602001600582015481525050828281518110610d1057610d0f612160565b5b60200260200101819052508080610d26906121f0565b915050610ad6565b5090565b60005b8151811015610f67576001828281518110610d5357610d52612160565b5b6020026020010151604051610d6891906122a4565b908152602001604051809103902060009054906101000a900460ff1615610f1b576000806001848481518110610da157610da0612160565b5b6020026020010151604051610db691906122a4565b908152602001604051809103902060006101000a81548160ff021916908315150217905550600090505b600280549050811015610ed457610eb7838381518110610e0357610e02612160565b5b602002602001015160028381548110610e1f57610e1e612160565b5b906000526020600020018054610e34906121be565b80601f0160208091040260200160405190810160405280929190818152602001828054610e60906121be565b8015610ead5780601f10610e8257610100808354040283529160200191610ead565b820191906000526020600020905b815481529060010190602001808311610e9057829003601f168201915b50505050506105be565b15610ec157610ed4565b8080610ecc906121f0565b915050610de0565b610edd81610261565b7fcdb72d06565be2e6e4048e127d72c0d6cd72635cbae3d499c02100a7cd5c0a896001604051610f0d9190611bc2565b60405180910390a150610f54565b7fcdb72d06565be2e6e4048e127d72c0d6cd72635cbae3d499c02100a7cd5c0a896000604051610f4b9190611bc2565b60405180910390a15b8080610f5f906121f0565b915050610d35565b5050565b600081805160208101820180518482526020830160208501208183528095505050505050600091509050806000018054610fa4906121be565b80601f0160208091040260200160405190810160405280929190818152602001828054610fd0906121be565b801561101d5780601f10610ff25761010080835404028352916020019161101d565b820191906000526020600020905b81548152906001019060200180831161100057829003601f168201915b505050505090806001018054611032906121be565b80601f016020809104026020016040519081016040528092919081815260200182805461105e906121be565b80156110ab5780601f10611080576101008083540402835291602001916110ab565b820191906000526020600020905b81548152906001019060200180831161108e57829003601f168201915b5050505050908060020180546110c0906121be565b80601f01602080910402602001604051908101604052809291908181526020018280546110ec906121be565b80156111395780601f1061110e57610100808354040283529160200191611139565b820191906000526020600020905b81548152906001019060200180831161111c57829003601f168201915b5050505050908060030154908060040154908060050154905086565b6001816000015160405161116991906122a4565b908152602001604051809103902060009054906101000a900460ff166112bb57806000826000015160405161119e91906122a4565b908152602001604051809103902060008201518160000190805190602001906111c89291906116de565b5060208201518160010190805190602001906111e59291906116de565b5060408201518160020190805190602001906112029291906116de565b50606082015181600301556080820151816004015560a08201518160050155905050600180826000015160405161123991906122a4565b908152602001604051809103902060006101000a81548160ff0219169083151502179055506002816000015190806001815401808255809150506001900390600052602060002001600090919091909150908051906020019061129d9291906116de565b50600360008154809291906112b1906121f0565b9190505550611357565b80600082600001516040516112d091906122a4565b908152602001604051809103902060008201518160000190805190602001906112fa9291906116de565b5060208201518160010190805190602001906113179291906116de565b5060408201518160020190805190602001906113349291906116de565b50606082015181600301556080820151816004015560a082015181600501559050505b50565b6113626116a8565b6001826000015160405161137691906122a4565b908152602001604051809103902060009054906101000a900460ff161561159f57600082600001516040516113ab91906122a4565b90815260200160405180910390206040518060c00160405290816000820180546113d4906121be565b80601f0160208091040260200160405190810160405280929190818152602001828054611400906121be565b801561144d5780601f106114225761010080835404028352916020019161144d565b820191906000526020600020905b81548152906001019060200180831161143057829003601f168201915b50505050508152602001600182018054611466906121be565b80601f0160208091040260200160405190810160405280929190818152602001828054611492906121be565b80156114df5780601f106114b4576101008083540402835291602001916114df565b820191906000526020600020905b8154815290600101906020018083116114c257829003601f168201915b505050505081526020016002820180546114f8906121be565b80601f0160208091040260200160405190810160405280929190818152602001828054611524906121be565b80156115715780601f1061154657610100808354040283529160200191611571565b820191906000526020600020905b81548152906001019060200180831161155457829003601f168201915b50505050508152602001600382015481526020016004820154815260200160058201548152505090506115a0565b5b919050565b6001818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460ff1681565b8280546115e7906121be565b90600052602060002090601f0160209004810192826116095760008555611657565b82601f1061161a5780548555611657565b8280016001018555821561165757600052602060002091601f016020900482015b8281111561165657825482559160010191906001019061163b565b5b5090506116649190611764565b5090565b508054611674906121be565b6000825580601f1061168657506116a5565b601f0160209004906000526020600020908101906116a49190611764565b5b50565b6040518060c001604052806060815260200160608152602001606081526020016000815260200160008152602001600081525090565b8280546116ea906121be565b90600052602060002090601f01602090048101928261170c5760008555611753565b82601f1061172557805160ff1916838001178555611753565b82800160010185558215611753579182015b82811115611752578251825591602001919060010190611737565b5b5090506117609190611764565b5090565b5b8082111561177d576000816000905550600101611765565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6117a881611795565b81146117b357600080fd5b50565b6000813590506117c58161179f565b92915050565b6000602082840312156117e1576117e061178b565b5b60006117ef848285016117b6565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611846826117fd565b810181811067ffffffffffffffff821117156118655761186461180e565b5b80604052505050565b6000611878611781565b9050611884828261183d565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff8211156118b3576118b261180e565b5b6118bc826117fd565b9050602081019050919050565b82818337600083830152505050565b60006118eb6118e684611898565b61186e565b90508281526020810184848401111561190757611906611893565b5b6119128482856118c9565b509392505050565b600082601f83011261192f5761192e61188e565b5b813561193f8482602086016118d8565b91505092915050565b600060c0828403121561195e5761195d6117f8565b5b61196860c061186e565b9050600082013567ffffffffffffffff81111561198857611987611889565b5b6119948482850161191a565b600083015250602082013567ffffffffffffffff8111156119b8576119b7611889565b5b6119c48482850161191a565b602083015250604082013567ffffffffffffffff8111156119e8576119e7611889565b5b6119f48482850161191a565b6040830152506060611a08848285016117b6565b6060830152506080611a1c848285016117b6565b60808301525060a0611a30848285016117b6565b60a08301525092915050565b600060208284031215611a5257611a5161178b565b5b600082013567ffffffffffffffff811115611a7057611a6f611790565b5b611a7c84828501611948565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611abf578082015181840152602081019050611aa4565b83811115611ace576000848401525b50505050565b6000611adf82611a85565b611ae98185611a90565b9350611af9818560208601611aa1565b611b02816117fd565b840191505092915050565b60006020820190508181036000830152611b278184611ad4565b905092915050565b60008060408385031215611b4657611b4561178b565b5b600083013567ffffffffffffffff811115611b6457611b63611790565b5b611b708582860161191a565b925050602083013567ffffffffffffffff811115611b9157611b90611790565b5b611b9d8582860161191a565b9150509250929050565b60008115159050919050565b611bbc81611ba7565b82525050565b6000602082019050611bd76000830184611bb3565b92915050565b60008060408385031215611bf457611bf361178b565b5b6000611c02858286016117b6565b9250506020611c13858286016117b6565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000611c6582611a85565b611c6f8185611c49565b9350611c7f818560208601611aa1565b611c88816117fd565b840191505092915050565b611c9c81611795565b82525050565b600060c0830160008301518482036000860152611cbf8282611c5a565b91505060208301518482036020860152611cd98282611c5a565b91505060408301518482036040860152611cf38282611c5a565b9150506060830151611d086060860182611c93565b506080830151611d1b6080860182611c93565b5060a0830151611d2e60a0860182611c93565b508091505092915050565b6000611d458383611ca2565b905092915050565b6000602082019050919050565b6000611d6582611c1d565b611d6f8185611c28565b935083602082028501611d8185611c39565b8060005b85811015611dbd5784840389528151611d9e8582611d39565b9450611da983611d4d565b925060208a01995050600181019050611d85565b50829750879550505050505092915050565b60006020820190508181036000830152611de98184611d5a565b905092915050565b600067ffffffffffffffff821115611e0c57611e0b61180e565b5b602082029050602081019050919050565b600080fd5b6000611e35611e3084611df1565b61186e565b90508083825260208201905060208402830185811115611e5857611e57611e1d565b5b835b81811015611e9f57803567ffffffffffffffff811115611e7d57611e7c61188e565b5b808601611e8a898261191a565b85526020850194505050602081019050611e5a565b5050509392505050565b600082601f830112611ebe57611ebd61188e565b5b8135611ece848260208601611e22565b91505092915050565b600060208284031215611eed57611eec61178b565b5b600082013567ffffffffffffffff811115611f0b57611f0a611790565b5b611f1784828501611ea9565b91505092915050565b600060208284031215611f3657611f3561178b565b5b600082013567ffffffffffffffff811115611f5457611f53611790565b5b611f608482850161191a565b91505092915050565b611f7281611795565b82525050565b600060c0820190508181036000830152611f928189611ad4565b90508181036020830152611fa68188611ad4565b90508181036040830152611fba8187611ad4565b9050611fc96060830186611f69565b611fd66080830185611f69565b611fe360a0830184611f69565b979650505050505050565b600060c083016000830151848203600086015261200b8282611c5a565b915050602083015184820360208601526120258282611c5a565b9150506040830151848203604086015261203f8282611c5a565b91505060608301516120546060860182611c93565b5060808301516120676080860182611c93565b5060a083015161207a60a0860182611c93565b508091505092915050565b6000602082019050818103600083015261209f8184611fee565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006120e182611795565b91506120ec83611795565b9250828210156120ff576120fe6120a7565b5b828203905092915050565b600061211582611795565b915061212083611795565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612155576121546120a7565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806121d657607f821691505b602082108114156121ea576121e961218f565b5b50919050565b60006121fb82611795565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561222e5761222d6120a7565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600081905092915050565b600061227e82611a85565b6122888185612268565b9350612298818560208601611aa1565b80840191505092915050565b60006122b08284612273565b915081905092915050565b60008190508160005260206000209050919050565b600081546122dd816121be565b6122e78186612268565b94506001821660008114612302576001811461231357612346565b60ff19831686528186019350612346565b61231c856122bb565b60005b8381101561233e5781548189015260018201915060208101905061231f565b838801955050505b50505092915050565b600061235b82846122d0565b91508190509291505056fea2646970667358221220911887089e09ae64f75fccdd877edea9f57a478f9a13cf8199d00217e81f80e364736f6c634300080a0033";

    public static final String FUNC_BATCHDELETE = "batchDelete";

    public static final String FUNC_DELETEUSER = "deleteUser";

    public static final String FUNC_GETALL = "getAll";

    public static final String FUNC_GETENTITY = "getEntity";

    public static final String FUNC_GETLISTPAGE = "getListPage";

    public static final String FUNC_ISEQUAL = "isEqual";

    public static final String FUNC_PRACTICEINSERTED = "practiceInserted";

    public static final String FUNC_PRACTICEKEY = "practiceKey";

    public static final String FUNC_PRACTICES = "practices";

    public static final String FUNC_REMOVEPRACTICEKEYATINDEX = "removePracticeKeyAtIndex";

    public static final String FUNC_SAVE = "save";

    public static final Event DELETEMSG_EVENT = new Event("DeleteMsg",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    @Deprecated
    protected PracticeContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected PracticeContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected PracticeContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected PracticeContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<DeleteMsgEventResponse> getDeleteMsgEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DELETEMSG_EVENT, transactionReceipt);
        ArrayList<DeleteMsgEventResponse> responses = new ArrayList<DeleteMsgEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DeleteMsgEventResponse typedResponse = new DeleteMsgEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.code = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DeleteMsgEventResponse> deleteMsgEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DeleteMsgEventResponse>() {
            @Override
            public DeleteMsgEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DELETEMSG_EVENT, log);
                DeleteMsgEventResponse typedResponse = new DeleteMsgEventResponse();
                typedResponse.log = log;
                typedResponse.code = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DeleteMsgEventResponse> deleteMsgEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DELETEMSG_EVENT));
        return deleteMsgEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> batchDelete(List<String> idList) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BATCHDELETE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                        org.web3j.abi.datatypes.Utf8String.class,
                        org.web3j.abi.Utils.typeMap(idList, org.web3j.abi.datatypes.Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deleteUser(Practice _practice) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DELETEUSER,
                Arrays.<Type>asList(_practice),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> getAll() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETALL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Practice>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Practice> getEntity(Practice _practice) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETENTITY,
                Arrays.<Type>asList(_practice),
                Arrays.<TypeReference<?>>asList(new TypeReference<Practice>() {}));
        return executeRemoteCallSingleValueReturn(function, Practice.class);
    }

    public RemoteFunctionCall<List> getListPage(BigInteger begin, BigInteger end) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETLISTPAGE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(begin),
                        new org.web3j.abi.datatypes.generated.Uint256(end)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Practice>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Boolean> isEqual(String a, String b) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISEQUAL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(a),
                        new org.web3j.abi.datatypes.Utf8String(b)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> practiceInserted(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PRACTICEINSERTED,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> practiceKey(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PRACTICEKEY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple6<String, String, String, BigInteger, BigInteger, BigInteger>> practices(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PRACTICES,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple6<String, String, String, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple6<String, String, String, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple6<String, String, String, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, String, String, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> removePracticeKeyAtIndex(BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REMOVEPRACTICEKEYATINDEX,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> save(Practice _practice) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAVE,
                Arrays.<Type>asList(_practice),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static PracticeContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new PracticeContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static PracticeContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new PracticeContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static PracticeContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new PracticeContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static PracticeContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new PracticeContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<PracticeContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(PracticeContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<PracticeContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(PracticeContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<PracticeContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(PracticeContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<PracticeContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(PracticeContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class Practice extends DynamicStruct {
        public String id;

        public String practiceName;

        public String practiceLevel;

        public BigInteger startTime;

        public BigInteger endTime;

        public BigInteger proofPic;

        public Practice(String id, String practiceName, String practiceLevel, BigInteger startTime, BigInteger endTime, BigInteger proofPic) {
            super(new org.web3j.abi.datatypes.Utf8String(id),new org.web3j.abi.datatypes.Utf8String(practiceName),new org.web3j.abi.datatypes.Utf8String(practiceLevel),new org.web3j.abi.datatypes.generated.Uint256(startTime),new org.web3j.abi.datatypes.generated.Uint256(endTime),new org.web3j.abi.datatypes.generated.Uint256(proofPic));
            this.id = id;
            this.practiceName = practiceName;
            this.practiceLevel = practiceLevel;
            this.startTime = startTime;
            this.endTime = endTime;
            this.proofPic = proofPic;
        }

        public Practice(Utf8String id, Utf8String practiceName, Utf8String practiceLevel, Uint256 startTime, Uint256 endTime, Uint256 proofPic) {
            super(id,practiceName,practiceLevel,startTime,endTime,proofPic);
            this.id = id.getValue();
            this.practiceName = practiceName.getValue();
            this.practiceLevel = practiceLevel.getValue();
            this.startTime = startTime.getValue();
            this.endTime = endTime.getValue();
            this.proofPic = proofPic.getValue();
        }
    }

    public static class DeleteMsgEventResponse extends BaseEventResponse {
        public Boolean code;
    }
}