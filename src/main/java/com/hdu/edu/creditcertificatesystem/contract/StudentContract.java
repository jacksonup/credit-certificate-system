package com.hdu.edu.creditcertificatesystem.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */


/**
 * @author 阵雨
 * @version 1.0
 */
@SuppressWarnings("rawtypes")
public class StudentContract extends Contract {
    public static final String BINARY = "";

    public static final String FUNC_BATCHDELETE = "batchDelete";

    public static final String FUNC_DELETESTUDENT = "deleteStudent";

    public static final String FUNC_EXTRAINFOINSERTED = "extraInfoInserted";

    public static final String FUNC_EXTRAINFOKEY = "extraInfoKey";

    public static final String FUNC_EXTRAINFOS = "extraInfos";

    public static final String FUNC_GETAEXTRAINFO = "getAExtraInfo";

    public static final String FUNC_GETASTUDENTINFO = "getAStudentInfo";

    public static final String FUNC_GETALL = "getAll";

    public static final String FUNC_GETENTITY = "getEntity";

    public static final String FUNC_GETLISTPAGE = "getListPage";

    public static final String FUNC_SAVE = "save";

    public static final String FUNC_STUDENTINFOINSERTED = "studentInfoInserted";

    public static final String FUNC_STUDENTINFOKEY = "studentInfoKey";

    public static final String FUNC_STUDENTINFOS = "studentInfos";

    public static final Event DELETEEXTRAMSG_EVENT = new Event("DeleteExtraMsg",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    public static final Event DELETEMSG_EVENT = new Event("DeleteMsg",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    @Deprecated
    protected StudentContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected StudentContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected StudentContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected StudentContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<DeleteExtraMsgEventResponse> getDeleteExtraMsgEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DELETEEXTRAMSG_EVENT, transactionReceipt);
        ArrayList<DeleteExtraMsgEventResponse> responses = new ArrayList<DeleteExtraMsgEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DeleteExtraMsgEventResponse typedResponse = new DeleteExtraMsgEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.code = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DeleteExtraMsgEventResponse> deleteExtraMsgEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DeleteExtraMsgEventResponse>() {
            @Override
            public DeleteExtraMsgEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DELETEEXTRAMSG_EVENT, log);
                DeleteExtraMsgEventResponse typedResponse = new DeleteExtraMsgEventResponse();
                typedResponse.log = log;
                typedResponse.code = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DeleteExtraMsgEventResponse> deleteExtraMsgEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DELETEEXTRAMSG_EVENT));
        return deleteExtraMsgEventFlowable(filter);
    }

    public List<DeleteMsgEventResponse> getDeleteMsgEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DELETEMSG_EVENT, transactionReceipt);
        ArrayList<DeleteMsgEventResponse> responses = new ArrayList<DeleteMsgEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DeleteMsgEventResponse typedResponse = new DeleteMsgEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.code = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DeleteMsgEventResponse> deleteMsgEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DeleteMsgEventResponse>() {
            @Override
            public DeleteMsgEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DELETEMSG_EVENT, log);
                DeleteMsgEventResponse typedResponse = new DeleteMsgEventResponse();
                typedResponse.log = log;
                typedResponse.code = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DeleteMsgEventResponse> deleteMsgEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DELETEMSG_EVENT));
        return deleteMsgEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> batchDelete(List<String> accountList) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BATCHDELETE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                        org.web3j.abi.datatypes.Utf8String.class,
                        org.web3j.abi.Utils.typeMap(accountList, org.web3j.abi.datatypes.Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deleteStudent(StudentInfo _student) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DELETESTUDENT,
                Arrays.<Type>asList(_student),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> extraInfoInserted(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_EXTRAINFOINSERTED,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> extraInfoKey(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_EXTRAINFOKEY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple7<String, String, String, String, String, BigInteger, BigInteger>> extraInfos(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_EXTRAINFOS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple7<String, String, String, String, String, BigInteger, BigInteger>>(function,
                new Callable<Tuple7<String, String, String, String, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<String, String, String, String, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, String, String, String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (String) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue(),
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteFunctionCall<ExtraInfo> getAExtraInfo() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAEXTRAINFO,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<ExtraInfo>() {}));
        return executeRemoteCallSingleValueReturn(function, ExtraInfo.class);
    }

    public RemoteFunctionCall<StudentInfo> getAStudentInfo() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETASTUDENTINFO,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<StudentInfo>() {}));
        return executeRemoteCallSingleValueReturn(function, StudentInfo.class);
    }

    public RemoteFunctionCall<Tuple2<List<StudentInfo>, List<ExtraInfo>>> getAll() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETALL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<StudentInfo>>() {}, new TypeReference<DynamicArray<ExtraInfo>>() {}));
        return new RemoteFunctionCall<Tuple2<List<StudentInfo>, List<ExtraInfo>>>(function,
                new Callable<Tuple2<List<StudentInfo>, List<ExtraInfo>>>() {
                    @Override
                    public Tuple2<List<StudentInfo>, List<ExtraInfo>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<StudentInfo>, List<ExtraInfo>>(
                                convertToNative((List<StudentInfo>) results.get(0).getValue()),
                                convertToNative((List<ExtraInfo>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<StudentInfo, ExtraInfo>> getEntity(StudentInfo _student, ExtraInfo _extraInfo) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETENTITY,
                Arrays.<Type>asList(_student,
                        _extraInfo),
                Arrays.<TypeReference<?>>asList(new TypeReference<StudentInfo>() {}, new TypeReference<ExtraInfo>() {}));
        return new RemoteFunctionCall<Tuple2<StudentInfo, ExtraInfo>>(function,
                new Callable<Tuple2<StudentInfo, ExtraInfo>>() {
                    @Override
                    public Tuple2<StudentInfo, ExtraInfo> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<StudentInfo, ExtraInfo>(
                                (StudentInfo) results.get(0),
                                (ExtraInfo) results.get(1));
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<List<StudentInfo>, List<ExtraInfo>>> getListPage(BigInteger begin, BigInteger end) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETLISTPAGE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(begin),
                        new org.web3j.abi.datatypes.generated.Uint256(end)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<StudentInfo>>() {}, new TypeReference<DynamicArray<ExtraInfo>>() {}));
        return new RemoteFunctionCall<Tuple2<List<StudentInfo>, List<ExtraInfo>>>(function,
                new Callable<Tuple2<List<StudentInfo>, List<ExtraInfo>>>() {
                    @Override
                    public Tuple2<List<StudentInfo>, List<ExtraInfo>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<StudentInfo>, List<ExtraInfo>>(
                                convertToNative((List<StudentInfo>) results.get(0).getValue()),
                                convertToNative((List<ExtraInfo>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> save(StudentInfo _student, ExtraInfo _extraInfo) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAVE,
                Arrays.<Type>asList(_student,
                        _extraInfo),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> studentInfoInserted(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_STUDENTINFOINSERTED,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> studentInfoKey(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_STUDENTINFOKEY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple8<String, String, BigInteger, String, String, String, String, String>> studentInfos(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_STUDENTINFOS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple8<String, String, BigInteger, String, String, String, String, String>>(function,
                new Callable<Tuple8<String, String, BigInteger, String, String, String, String, String>>() {
                    @Override
                    public Tuple8<String, String, BigInteger, String, String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<String, String, BigInteger, String, String, String, String, String>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (String) results.get(4).getValue(),
                                (String) results.get(5).getValue(),
                                (String) results.get(6).getValue(),
                                (String) results.get(7).getValue());
                    }
                });
    }

    @Deprecated
    public static StudentContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new StudentContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static StudentContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new StudentContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static StudentContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new StudentContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static StudentContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new StudentContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<StudentContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(StudentContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<StudentContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(StudentContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<StudentContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(StudentContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<StudentContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(StudentContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class StudentInfo extends DynamicStruct {
        public String account;

        public String name;

        public BigInteger sexual;

        public String nativePlace;

        public String department;

        public String major;

        public String grade;

        public String educationBg;

        public StudentInfo(String account, String name, BigInteger sexual, String nativePlace, String department, String major, String grade, String educationBg) {
            super(new org.web3j.abi.datatypes.Utf8String(account),new org.web3j.abi.datatypes.Utf8String(name),new org.web3j.abi.datatypes.generated.Uint256(sexual),new org.web3j.abi.datatypes.Utf8String(nativePlace),new org.web3j.abi.datatypes.Utf8String(department),new org.web3j.abi.datatypes.Utf8String(major),new org.web3j.abi.datatypes.Utf8String(grade),new org.web3j.abi.datatypes.Utf8String(educationBg));
            this.account = account;
            this.name = name;
            this.sexual = sexual;
            this.nativePlace = nativePlace;
            this.department = department;
            this.major = major;
            this.grade = grade;
            this.educationBg = educationBg;
        }

        public StudentInfo(Utf8String account, Utf8String name, Uint256 sexual, Utf8String nativePlace, Utf8String department, Utf8String major, Utf8String grade, Utf8String educationBg) {
            super(account,name,sexual,nativePlace,department,major,grade,educationBg);
            this.account = account.getValue();
            this.name = name.getValue();
            this.sexual = sexual.getValue();
            this.nativePlace = nativePlace.getValue();
            this.department = department.getValue();
            this.major = major.getValue();
            this.grade = grade.getValue();
            this.educationBg = educationBg.getValue();
        }
    }

    public static class ExtraInfo extends DynamicStruct {
        public String account;

        public String position;

        public String politicalOutlook;

        public String IDPhoto;

        public String birthPlace;

        public BigInteger birthday;

        public BigInteger entranceTime;

        public ExtraInfo(String account, String position, String politicalOutlook, String IDPhoto, String birthPlace, BigInteger birthday, BigInteger entranceTime) {
            super(new org.web3j.abi.datatypes.Utf8String(account),new org.web3j.abi.datatypes.Utf8String(position),new org.web3j.abi.datatypes.Utf8String(politicalOutlook),new org.web3j.abi.datatypes.Utf8String(IDPhoto),new org.web3j.abi.datatypes.Utf8String(birthPlace),new org.web3j.abi.datatypes.generated.Uint256(birthday),new org.web3j.abi.datatypes.generated.Uint256(entranceTime));
            this.account = account;
            this.position = position;
            this.politicalOutlook = politicalOutlook;
            this.IDPhoto = IDPhoto;
            this.birthPlace = birthPlace;
            this.birthday = birthday;
            this.entranceTime = entranceTime;
        }

        public ExtraInfo(Utf8String account, Utf8String position, Utf8String politicalOutlook, Utf8String IDPhoto, Utf8String birthPlace, Uint256 birthday, Uint256 entranceTime) {
            super(account,position,politicalOutlook,IDPhoto,birthPlace,birthday,entranceTime);
            this.account = account.getValue();
            this.position = position.getValue();
            this.politicalOutlook = politicalOutlook.getValue();
            this.IDPhoto = IDPhoto.getValue();
            this.birthPlace = birthPlace.getValue();
            this.birthday = birthday.getValue();
            this.entranceTime = entranceTime.getValue();
        }
    }

    public static class DeleteExtraMsgEventResponse extends BaseEventResponse {
        public Boolean code;
    }

    public static class DeleteMsgEventResponse extends BaseEventResponse {
        public Boolean code;
    }
}