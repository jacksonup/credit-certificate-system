package com.hdu.edu.creditcertificatesystem.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class InstitutionContract extends Contract {
    public static final String BINARY = "608060405260028054905060035534801561001957600080fd5b5061459a806100296000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063893e2b7111610071578063893e2b71146101b557806391d5b816146101eb57806397ddd7d714610207578063c085ced81461023d578063dd6af5c11461026e578063ff145ed81461028a576100b4565b8063485c7947146100b957806352c0faa6146100ea57806353ed51431461011a57806359583c2a146101395780636e49df43146101555780637a92ca3514610185575b600080fd5b6100d360048036038101906100ce91906134c0565b6102ba565b6040516100e19291906138a3565b60405180910390f35b61010460048036038101906100ff91906138da565b610cd3565b6040516101119190613951565b60405180910390f35b610122610d7f565b6040516101309291906138a3565b60405180910390f35b610153600480360381019061014e9190613b8e565b6115bc565b005b61016f600480360381019061016a9190613bd7565b61194b565b60405161017c9190613c3b565b60405180910390f35b61019f600480360381019061019a9190613bd7565b611981565b6040516101ac9190613c3b565b60405180910390f35b6101cf60048036038101906101ca9190613bd7565b6119b7565b6040516101e29796959493929190613c56565b60405180910390f35b61020560048036038101906102009190613e78565b611dc7565b005b610221600480360381019061021c9190613bd7565b6120c8565b6040516102349796959493929190613ed0565b60405180910390f35b61025760048036038101906102529190613e78565b612340565b6040516102659291906140d2565b60405180910390f35b6102886004803603810190610283919061422d565b612a90565b005b6102a4600480360381019061029f91906138da565b612f4f565b6040516102b19190613951565b60405180910390f35b606080600060028054905067ffffffffffffffff8111156102de576102dd613978565b5b60405190808252806020026020018201604052801561031757816020015b61030461328c565b8152602001906001900390816102fc5790505b509050600060068054905067ffffffffffffffff81111561033b5761033a613978565b5b60405190808252806020026020018201604052801561037457816020015b6103616132c9565b8152602001906001900390816103595790505b5090506000805b6002805490508110156108095760006002828154811061039e5761039d6142a5565b5b906000526020600020016040516103b591906143d4565b90815260200160405180910390206040518060e00160405290816000820180546103de90614303565b80601f016020809104026020016040519081016040528092919081815260200182805461040a90614303565b80156104575780601f1061042c57610100808354040283529160200191610457565b820191906000526020600020905b81548152906001019060200180831161043a57829003601f168201915b5050505050815260200160018201805461047090614303565b80601f016020809104026020016040519081016040528092919081815260200182805461049c90614303565b80156104e95780601f106104be576101008083540402835291602001916104e9565b820191906000526020600020905b8154815290600101906020018083116104cc57829003601f168201915b5050505050815260200160028201805461050290614303565b80601f016020809104026020016040519081016040528092919081815260200182805461052e90614303565b801561057b5780601f106105505761010080835404028352916020019161057b565b820191906000526020600020905b81548152906001019060200180831161055e57829003601f168201915b5050505050815260200160038201805461059490614303565b80601f01602080910402602001604051908101604052809291908181526020018280546105c090614303565b801561060d5780601f106105e25761010080835404028352916020019161060d565b820191906000526020600020905b8154815290600101906020018083116105f057829003601f168201915b5050505050815260200160048201805461062690614303565b80601f016020809104026020016040519081016040528092919081815260200182805461065290614303565b801561069f5780601f106106745761010080835404028352916020019161069f565b820191906000526020600020905b81548152906001019060200180831161068257829003601f168201915b505050505081526020016005820180546106b890614303565b80601f01602080910402602001604051908101604052809291908181526020018280546106e490614303565b80156107315780601f1061070657610100808354040283529160200191610731565b820191906000526020600020905b81548152906001019060200180831161071457829003601f168201915b5050505050815260200160068201805461074a90614303565b80601f016020809104026020016040519081016040528092919081815260200182805461077690614303565b80156107c35780601f10610798576101008083540402835291602001916107c3565b820191906000526020600020905b8154815290600101906020018083116107a657829003601f168201915b5050505050815250508483806107d89061441a565b9450815181106107eb576107ea6142a5565b5b602002602001018190525080806108019061441a565b91505061037b565b506000805b600680549050811015610b0457600460068281548110610831576108306142a5565b5b9060005260206000200160405161084891906143d4565b90815260200160405180910390206040518060e001604052908160008201805461087190614303565b80601f016020809104026020016040519081016040528092919081815260200182805461089d90614303565b80156108ea5780601f106108bf576101008083540402835291602001916108ea565b820191906000526020600020905b8154815290600101906020018083116108cd57829003601f168201915b505050505081526020016001820154815260200160028201805461090d90614303565b80601f016020809104026020016040519081016040528092919081815260200182805461093990614303565b80156109865780601f1061095b57610100808354040283529160200191610986565b820191906000526020600020905b81548152906001019060200180831161096957829003601f168201915b5050505050815260200160038201548152602001600482015481526020016005820180546109b390614303565b80601f01602080910402602001604051908101604052809291908181526020018280546109df90614303565b8015610a2c5780601f10610a0157610100808354040283529160200191610a2c565b820191906000526020600020905b815481529060010190602001808311610a0f57829003601f168201915b50505050508152602001600682018054610a4590614303565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7190614303565b8015610abe5780601f10610a9357610100808354040283529160200191610abe565b820191906000526020600020905b815481529060010190602001808311610aa157829003601f168201915b505050505081525050848380610ad39061441a565b945081518110610ae657610ae56142a5565b5b60200260200101819052508080610afc9061441a565b91505061080e565b5087871015610b165750505050610ccc565b600182610b239190614463565b871115610b3a57600182610b379190614463565b96505b60018888610b489190614463565b610b529190614497565b67ffffffffffffffff811115610b6b57610b6a613978565b5b604051908082528060200260200182016040528015610ba457816020015b610b9161328c565b815260200190600190039081610b895790505b50955060018888610bb59190614463565b610bbf9190614497565b67ffffffffffffffff811115610bd857610bd7613978565b5b604051908082528060200260200182016040528015610c1157816020015b610bfe6132c9565b815260200190600190039081610bf65790505b509450600091506000905060008890505b878111610cc657848181518110610c3c57610c3b6142a5565b5b6020026020010151878480610c509061441a565b955081518110610c6357610c626142a5565b5b6020026020010181905250838181518110610c8157610c806142a5565b5b6020026020010151868380610c959061441a565b945081518110610ca857610ca76142a5565b5b60200260200101819052508080610cbe9061441a565b915050610c22565b50505050505b9250929050565b60068181548110610ce357600080fd5b906000526020600020016000915090508054610cfe90614303565b80601f0160208091040260200160405190810160405280929190818152602001828054610d2a90614303565b8015610d775780601f10610d4c57610100808354040283529160200191610d77565b820191906000526020600020905b815481529060010190602001808311610d5a57829003601f168201915b505050505081565b606080600060028054905067ffffffffffffffff811115610da357610da2613978565b5b604051908082528060200260200182016040528015610ddc57816020015b610dc961328c565b815260200190600190039081610dc15790505b509050600060068054905067ffffffffffffffff811115610e0057610dff613978565b5b604051908082528060200260200182016040528015610e3957816020015b610e266132c9565b815260200190600190039081610e1e5790505b50905060005b6002805490508110156112c157600060028281548110610e6257610e616142a5565b5b90600052602060002001604051610e7991906143d4565b90815260200160405180910390206040518060e0016040529081600082018054610ea290614303565b80601f0160208091040260200160405190810160405280929190818152602001828054610ece90614303565b8015610f1b5780601f10610ef057610100808354040283529160200191610f1b565b820191906000526020600020905b815481529060010190602001808311610efe57829003601f168201915b50505050508152602001600182018054610f3490614303565b80601f0160208091040260200160405190810160405280929190818152602001828054610f6090614303565b8015610fad5780601f10610f8257610100808354040283529160200191610fad565b820191906000526020600020905b815481529060010190602001808311610f9057829003601f168201915b50505050508152602001600282018054610fc690614303565b80601f0160208091040260200160405190810160405280929190818152602001828054610ff290614303565b801561103f5780601f106110145761010080835404028352916020019161103f565b820191906000526020600020905b81548152906001019060200180831161102257829003601f168201915b5050505050815260200160038201805461105890614303565b80601f016020809104026020016040519081016040528092919081815260200182805461108490614303565b80156110d15780601f106110a6576101008083540402835291602001916110d1565b820191906000526020600020905b8154815290600101906020018083116110b457829003601f168201915b505050505081526020016004820180546110ea90614303565b80601f016020809104026020016040519081016040528092919081815260200182805461111690614303565b80156111635780601f1061113857610100808354040283529160200191611163565b820191906000526020600020905b81548152906001019060200180831161114657829003601f168201915b5050505050815260200160058201805461117c90614303565b80601f01602080910402602001604051908101604052809291908181526020018280546111a890614303565b80156111f55780601f106111ca576101008083540402835291602001916111f5565b820191906000526020600020905b8154815290600101906020018083116111d857829003601f168201915b5050505050815260200160068201805461120e90614303565b80601f016020809104026020016040519081016040528092919081815260200182805461123a90614303565b80156112875780601f1061125c57610100808354040283529160200191611287565b820191906000526020600020905b81548152906001019060200180831161126a57829003601f168201915b5050505050815250508382815181106112a3576112a26142a5565b5b602002602001018190525080806112b99061441a565b915050610e3f565b5060005b6006805490508110156115af576004600682815481106112e8576112e76142a5565b5b906000526020600020016040516112ff91906143d4565b90815260200160405180910390206040518060e001604052908160008201805461132890614303565b80601f016020809104026020016040519081016040528092919081815260200182805461135490614303565b80156113a15780601f10611376576101008083540402835291602001916113a1565b820191906000526020600020905b81548152906001019060200180831161138457829003601f168201915b50505050508152602001600182015481526020016002820180546113c490614303565b80601f01602080910402602001604051908101604052809291908181526020018280546113f090614303565b801561143d5780601f106114125761010080835404028352916020019161143d565b820191906000526020600020905b81548152906001019060200180831161142057829003601f168201915b50505050508152602001600382015481526020016004820154815260200160058201805461146a90614303565b80601f016020809104026020016040519081016040528092919081815260200182805461149690614303565b80156114e35780601f106114b8576101008083540402835291602001916114e3565b820191906000526020600020905b8154815290600101906020018083116114c657829003601f168201915b505050505081526020016006820180546114fc90614303565b80601f016020809104026020016040519081016040528092919081815260200182805461152890614303565b80156115755780601f1061154a57610100808354040283529160200191611575565b820191906000526020600020905b81548152906001019060200180831161155857829003601f168201915b505050505081525050828281518110611591576115906142a5565b5b602002602001018190525080806115a79061441a565b9150506112c5565b5081819350935050509091565b60005b81518110156119475760018282815181106115dd576115dc6142a5565b5b60200260200101516040516115f2919061451e565b908152602001604051809103902060009054906101000a900460ff16156118fb576000806000600185858151811061162d5761162c6142a5565b5b6020026020010151604051611642919061451e565b908152602001604051809103902060006101000a81548160ff0219169083151502179055506000600585858151811061167e5761167d6142a5565b5b6020026020010151604051611693919061451e565b908152602001604051809103902060006101000a81548160ff021916908315150217905550600091505b6002805490508210156117b1576117948484815181106116e0576116df6142a5565b5b6020026020010151600284815481106116fc576116fb6142a5565b5b90600052602060002001805461171190614303565b80601f016020809104026020016040519081016040528092919081815260200182805461173d90614303565b801561178a5780601f1061175f5761010080835404028352916020019161178a565b820191906000526020600020905b81548152906001019060200180831161176d57829003601f168201915b5050505050612ffb565b1561179e576117b1565b81806117a99061441a565b9250506116bd565b600090505b6006805490508110156118aa5761188d8484815181106117d9576117d86142a5565b5b6020026020010151600683815481106117f5576117f46142a5565b5b90600052602060002001805461180a90614303565b80601f016020809104026020016040519081016040528092919081815260200182805461183690614303565b80156118835780601f1061185857610100808354040283529160200191611883565b820191906000526020600020905b81548152906001019060200180831161186657829003601f168201915b5050505050612ffb565b15611897576118aa565b80806118a29061441a565b9150506117b6565b6118b3826130d8565b6118bc816131b2565b7fcdb72d06565be2e6e4048e127d72c0d6cd72635cbae3d499c02100a7cd5c0a8960016040516118ec9190613c3b565b60405180910390a15050611934565b7fcdb72d06565be2e6e4048e127d72c0d6cd72635cbae3d499c02100a7cd5c0a89600060405161192b9190613c3b565b60405180910390a15b808061193f9061441a565b9150506115bf565b5050565b6005818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460ff1681565b6001818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460ff1681565b6000818051602081018201805184825260208301602085012081835280955050505050506000915090508060000180546119f090614303565b80601f0160208091040260200160405190810160405280929190818152602001828054611a1c90614303565b8015611a695780601f10611a3e57610100808354040283529160200191611a69565b820191906000526020600020905b815481529060010190602001808311611a4c57829003601f168201915b505050505090806001018054611a7e90614303565b80601f0160208091040260200160405190810160405280929190818152602001828054611aaa90614303565b8015611af75780601f10611acc57610100808354040283529160200191611af7565b820191906000526020600020905b815481529060010190602001808311611ada57829003601f168201915b505050505090806002018054611b0c90614303565b80601f0160208091040260200160405190810160405280929190818152602001828054611b3890614303565b8015611b855780601f10611b5a57610100808354040283529160200191611b85565b820191906000526020600020905b815481529060010190602001808311611b6857829003601f168201915b505050505090806003018054611b9a90614303565b80601f0160208091040260200160405190810160405280929190818152602001828054611bc690614303565b8015611c135780601f10611be857610100808354040283529160200191611c13565b820191906000526020600020905b815481529060010190602001808311611bf657829003601f168201915b505050505090806004018054611c2890614303565b80601f0160208091040260200160405190810160405280929190818152602001828054611c5490614303565b8015611ca15780601f10611c7657610100808354040283529160200191611ca1565b820191906000526020600020905b815481529060010190602001808311611c8457829003601f168201915b505050505090806005018054611cb690614303565b80601f0160208091040260200160405190810160405280929190818152602001828054611ce290614303565b8015611d2f5780601f10611d0457610100808354040283529160200191611d2f565b820191906000526020600020905b815481529060010190602001808311611d1257829003601f168201915b505050505090806006018054611d4490614303565b80601f0160208091040260200160405190810160405280929190818152602001828054611d7090614303565b8015611dbd5780601f10611d9257610100808354040283529160200191611dbd565b820191906000526020600020905b815481529060010190602001808311611da057829003601f168201915b5050505050905087565b60018160000151604051611ddb919061451e565b908152602001604051809103902060009054906101000a900460ff161561208c57600080600060018460000151604051611e15919061451e565b908152602001604051809103902060006101000a81548160ff021916908315150217905550600060058460000151604051611e50919061451e565b908152602001604051809103902060006101000a81548160ff021916908315150217905550600091505b600280549050821015611f5857611f3b836000015160028481548110611ea357611ea26142a5565b5b906000526020600020018054611eb890614303565b80601f0160208091040260200160405190810160405280929190818152602001828054611ee490614303565b8015611f315780601f10611f0657610100808354040283529160200191611f31565b820191906000526020600020905b815481529060010190602001808311611f1457829003601f168201915b5050505050612ffb565b15611f4557611f58565b8180611f509061441a565b925050611e7a565b600090505b60068054905081101561203b5761201e836000015160068381548110611f8657611f856142a5565b5b906000526020600020018054611f9b90614303565b80601f0160208091040260200160405190810160405280929190818152602001828054611fc790614303565b80156120145780601f10611fe957610100808354040283529160200191612014565b820191906000526020600020905b815481529060010190602001808311611ff757829003601f168201915b5050505050612ffb565b156120285761203b565b80806120339061441a565b915050611f5d565b612044826130d8565b61204d816131b2565b7fcdb72d06565be2e6e4048e127d72c0d6cd72635cbae3d499c02100a7cd5c0a89600160405161207d9190613c3b565b60405180910390a150506120c5565b7fcdb72d06565be2e6e4048e127d72c0d6cd72635cbae3d499c02100a7cd5c0a8960006040516120bc9190613c3b565b60405180910390a15b50565b60048180516020810182018051848252602083016020850120818352809550505050505060009150905080600001805461210190614303565b80601f016020809104026020016040519081016040528092919081815260200182805461212d90614303565b801561217a5780601f1061214f5761010080835404028352916020019161217a565b820191906000526020600020905b81548152906001019060200180831161215d57829003601f168201915b50505050509080600101549080600201805461219590614303565b80601f01602080910402602001604051908101604052809291908181526020018280546121c190614303565b801561220e5780601f106121e35761010080835404028352916020019161220e565b820191906000526020600020905b8154815290600101906020018083116121f157829003601f168201915b50505050509080600301549080600401549080600501805461222f90614303565b80601f016020809104026020016040519081016040528092919081815260200182805461225b90614303565b80156122a85780601f1061227d576101008083540402835291602001916122a8565b820191906000526020600020905b81548152906001019060200180831161228b57829003601f168201915b5050505050908060060180546122bd90614303565b80601f01602080910402602001604051908101604052809291908181526020018280546122e990614303565b80156123365780601f1061230b57610100808354040283529160200191612336565b820191906000526020600020905b81548152906001019060200180831161231957829003601f168201915b5050505050905087565b61234861328c565b6123506132c9565b60018360000151604051612364919061451e565b908152602001604051809103902060009054906101000a900460ff1680156123b857506005836000015160405161239b919061451e565b908152602001604051809103902060009054906101000a900460ff165b15612a8a57600083600001516040516123d1919061451e565b9081526020016040518091039020600484600001516040516123f3919061451e565b9081526020016040518091039020816040518060e001604052908160008201805461241d90614303565b80601f016020809104026020016040519081016040528092919081815260200182805461244990614303565b80156124965780601f1061246b57610100808354040283529160200191612496565b820191906000526020600020905b81548152906001019060200180831161247957829003601f168201915b505050505081526020016001820180546124af90614303565b80601f01602080910402602001604051908101604052809291908181526020018280546124db90614303565b80156125285780601f106124fd57610100808354040283529160200191612528565b820191906000526020600020905b81548152906001019060200180831161250b57829003601f168201915b5050505050815260200160028201805461254190614303565b80601f016020809104026020016040519081016040528092919081815260200182805461256d90614303565b80156125ba5780601f1061258f576101008083540402835291602001916125ba565b820191906000526020600020905b81548152906001019060200180831161259d57829003601f168201915b505050505081526020016003820180546125d390614303565b80601f01602080910402602001604051908101604052809291908181526020018280546125ff90614303565b801561264c5780601f106126215761010080835404028352916020019161264c565b820191906000526020600020905b81548152906001019060200180831161262f57829003601f168201915b5050505050815260200160048201805461266590614303565b80601f016020809104026020016040519081016040528092919081815260200182805461269190614303565b80156126de5780601f106126b3576101008083540402835291602001916126de565b820191906000526020600020905b8154815290600101906020018083116126c157829003601f168201915b505050505081526020016005820180546126f790614303565b80601f016020809104026020016040519081016040528092919081815260200182805461272390614303565b80156127705780601f1061274557610100808354040283529160200191612770565b820191906000526020600020905b81548152906001019060200180831161275357829003601f168201915b5050505050815260200160068201805461278990614303565b80601f01602080910402602001604051908101604052809291908181526020018280546127b590614303565b80156128025780601f106127d757610100808354040283529160200191612802565b820191906000526020600020905b8154815290600101906020018083116127e557829003601f168201915b5050505050815250509150806040518060e001604052908160008201805461282990614303565b80601f016020809104026020016040519081016040528092919081815260200182805461285590614303565b80156128a25780601f10612877576101008083540402835291602001916128a2565b820191906000526020600020905b81548152906001019060200180831161288557829003601f168201915b50505050508152602001600182015481526020016002820180546128c590614303565b80601f01602080910402602001604051908101604052809291908181526020018280546128f190614303565b801561293e5780601f106129135761010080835404028352916020019161293e565b820191906000526020600020905b81548152906001019060200180831161292157829003601f168201915b50505050508152602001600382015481526020016004820154815260200160058201805461296b90614303565b80601f016020809104026020016040519081016040528092919081815260200182805461299790614303565b80156129e45780601f106129b9576101008083540402835291602001916129e4565b820191906000526020600020905b8154815290600101906020018083116129c757829003601f168201915b505050505081526020016006820180546129fd90614303565b80601f0160208091040260200160405190810160405280929190818152602001828054612a2990614303565b8015612a765780601f10612a4b57610100808354040283529160200191612a76565b820191906000526020600020905b815481529060010190602001808311612a5957829003601f168201915b505050505081525050905091509150612a8b565b5b915091565b60018260000151604051612aa4919061451e565b908152602001604051809103902060009054906101000a900460ff16612c34578160008360000151604051612ad9919061451e565b90815260200160405180910390206000820151816000019080519060200190612b03929190613306565b506020820151816001019080519060200190612b20929190613306565b506040820151816002019080519060200190612b3d929190613306565b506060820151816003019080519060200190612b5a929190613306565b506080820151816004019080519060200190612b77929190613306565b5060a0820151816005019080519060200190612b94929190613306565b5060c0820151816006019080519060200190612bb1929190613306565b509050506001808360000151604051612bca919061451e565b908152602001604051809103902060006101000a81548160ff02191690831515021790555060028260000151908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190612c2e929190613306565b50612d26565b8160008360000151604051612c49919061451e565b90815260200160405180910390206000820151816000019080519060200190612c73929190613306565b506020820151816001019080519060200190612c90929190613306565b506040820151816002019080519060200190612cad929190613306565b506060820151816003019080519060200190612cca929190613306565b506080820151816004019080519060200190612ce7929190613306565b5060a0820151816005019080519060200190612d04929190613306565b5060c0820151816006019080519060200190612d21929190613306565b509050505b60058160000151604051612d3a919061451e565b908152602001604051809103902060009054906101000a900460ff16612e92578060048260000151604051612d6f919061451e565b90815260200160405180910390206000820151816000019080519060200190612d99929190613306565b50602082015181600101556040820151816002019080519060200190612dc0929190613306565b50606082015181600301556080820151816004015560a0820151816005019080519060200190612df1929190613306565b5060c0820151816006019080519060200190612e0e929190613306565b50905050600160058260000151604051612e28919061451e565b908152602001604051809103902060006101000a81548160ff02191690831515021790555060068160000151908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190612e8c929190613306565b50612f4b565b8060048260000151604051612ea7919061451e565b90815260200160405180910390206000820151816000019080519060200190612ed1929190613306565b50602082015181600101556040820151816002019080519060200190612ef8929190613306565b50606082015181600301556080820151816004015560a0820151816005019080519060200190612f29929190613306565b5060c0820151816006019080519060200190612f46929190613306565b509050505b5050565b60028181548110612f5f57600080fd5b906000526020600020016000915090508054612f7a90614303565b80601f0160208091040260200160405190810160405280929190818152602001828054612fa690614303565b8015612ff35780601f10612fc857610100808354040283529160200191612ff3565b820191906000526020600020905b815481529060010190602001808311612fd657829003601f168201915b505050505081565b6000808390506000839050805182511461301a576000925050506130d2565b60005b82518110156130ca57818181518110613039576130386142a5565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916838281518110613079576130786142a5565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146130b757600093505050506130d2565b80806130c29061441a565b91505061301d565b506001925050505b92915050565b600060028054905090508082106130ef57506131af565b60008290505b6001826131029190614463565b81101561317c5760026001826131189190614497565b81548110613129576131286142a5565b5b9060005260206000200160028281548110613147576131466142a5565b5b9060005260206000200190805461315d90614303565b61316892919061338c565b5080806131749061441a565b9150506130f5565b50600280548061318f5761318e614535565b5b6001900381819060005260206000200160006131ab9190613419565b9055505b50565b600060068054905090508082106131c95750613289565b60008290505b6001826131dc9190614463565b8110156132565760066001826131f29190614497565b81548110613203576132026142a5565b5b9060005260206000200160068281548110613221576132206142a5565b5b9060005260206000200190805461323790614303565b61324292919061338c565b50808061324e9061441a565b9150506131cf565b50600680548061326957613268614535565b5b6001900381819060005260206000200160006132859190613419565b9055505b50565b6040518060e00160405280606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b6040518060e00160405280606081526020016000815260200160608152602001600081526020016000815260200160608152602001606081525090565b82805461331290614303565b90600052602060002090601f016020900481019282613334576000855561337b565b82601f1061334d57805160ff191683800117855561337b565b8280016001018555821561337b579182015b8281111561337a57825182559160200191906001019061335f565b5b5090506133889190613459565b5090565b82805461339890614303565b90600052602060002090601f0160209004810192826133ba5760008555613408565b82601f106133cb5780548555613408565b8280016001018555821561340857600052602060002091601f016020900482015b828111156134075782548255916001019190600101906133ec565b5b5090506134159190613459565b5090565b50805461342590614303565b6000825580601f106134375750613456565b601f0160209004906000526020600020908101906134559190613459565b5b50565b5b8082111561347257600081600090555060010161345a565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61349d8161348a565b81146134a857600080fd5b50565b6000813590506134ba81613494565b92915050565b600080604083850312156134d7576134d6613480565b5b60006134e5858286016134ab565b92505060206134f6858286016134ab565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561356657808201518184015260208101905061354b565b83811115613575576000848401525b50505050565b6000601f19601f8301169050919050565b60006135978261352c565b6135a18185613537565b93506135b1818560208601613548565b6135ba8161357b565b840191505092915050565b600060e08301600083015184820360008601526135e2828261358c565b915050602083015184820360208601526135fc828261358c565b91505060408301518482036040860152613616828261358c565b91505060608301518482036060860152613630828261358c565b9150506080830151848203608086015261364a828261358c565b91505060a083015184820360a0860152613664828261358c565b91505060c083015184820360c086015261367e828261358c565b9150508091505092915050565b600061369783836135c5565b905092915050565b6000602082019050919050565b60006136b782613500565b6136c1818561350b565b9350836020820285016136d38561351c565b8060005b8581101561370f57848403895281516136f0858261368b565b94506136fb8361369f565b925060208a019950506001810190506136d7565b50829750879550505050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6137568161348a565b82525050565b600060e0830160008301518482036000860152613779828261358c565b915050602083015161378e602086018261374d565b50604083015184820360408601526137a6828261358c565b91505060608301516137bb606086018261374d565b5060808301516137ce608086018261374d565b5060a083015184820360a08601526137e6828261358c565b91505060c083015184820360c0860152613800828261358c565b9150508091505092915050565b6000613819838361375c565b905092915050565b6000602082019050919050565b600061383982613721565b613843818561372c565b9350836020820285016138558561373d565b8060005b858110156138915784840389528151613872858261380d565b945061387d83613821565b925060208a01995050600181019050613859565b50829750879550505050505092915050565b600060408201905081810360008301526138bd81856136ac565b905081810360208301526138d1818461382e565b90509392505050565b6000602082840312156138f0576138ef613480565b5b60006138fe848285016134ab565b91505092915050565b600082825260208201905092915050565b60006139238261352c565b61392d8185613907565b935061393d818560208601613548565b6139468161357b565b840191505092915050565b6000602082019050818103600083015261396b8184613918565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6139b08261357b565b810181811067ffffffffffffffff821117156139cf576139ce613978565b5b80604052505050565b60006139e2613476565b90506139ee82826139a7565b919050565b600067ffffffffffffffff821115613a0e57613a0d613978565b5b602082029050602081019050919050565b600080fd5b600080fd5b600067ffffffffffffffff821115613a4457613a43613978565b5b613a4d8261357b565b9050602081019050919050565b82818337600083830152505050565b6000613a7c613a7784613a29565b6139d8565b905082815260208101848484011115613a9857613a97613a24565b5b613aa3848285613a5a565b509392505050565b600082601f830112613ac057613abf613973565b5b8135613ad0848260208601613a69565b91505092915050565b6000613aec613ae7846139f3565b6139d8565b90508083825260208201905060208402830185811115613b0f57613b0e613a1f565b5b835b81811015613b5657803567ffffffffffffffff811115613b3457613b33613973565b5b808601613b418982613aab565b85526020850194505050602081019050613b11565b5050509392505050565b600082601f830112613b7557613b74613973565b5b8135613b85848260208601613ad9565b91505092915050565b600060208284031215613ba457613ba3613480565b5b600082013567ffffffffffffffff811115613bc257613bc1613485565b5b613bce84828501613b60565b91505092915050565b600060208284031215613bed57613bec613480565b5b600082013567ffffffffffffffff811115613c0b57613c0a613485565b5b613c1784828501613aab565b91505092915050565b60008115159050919050565b613c3581613c20565b82525050565b6000602082019050613c506000830184613c2c565b92915050565b600060e0820190508181036000830152613c70818a613918565b90508181036020830152613c848189613918565b90508181036040830152613c988188613918565b90508181036060830152613cac8187613918565b90508181036080830152613cc08186613918565b905081810360a0830152613cd48185613918565b905081810360c0830152613ce88184613918565b905098975050505050505050565b600080fd5b600080fd5b600060e08284031215613d1657613d15613cf6565b5b613d2060e06139d8565b9050600082013567ffffffffffffffff811115613d4057613d3f613cfb565b5b613d4c84828501613aab565b600083015250602082013567ffffffffffffffff811115613d7057613d6f613cfb565b5b613d7c84828501613aab565b602083015250604082013567ffffffffffffffff811115613da057613d9f613cfb565b5b613dac84828501613aab565b604083015250606082013567ffffffffffffffff811115613dd057613dcf613cfb565b5b613ddc84828501613aab565b606083015250608082013567ffffffffffffffff811115613e0057613dff613cfb565b5b613e0c84828501613aab565b60808301525060a082013567ffffffffffffffff811115613e3057613e2f613cfb565b5b613e3c84828501613aab565b60a08301525060c082013567ffffffffffffffff811115613e6057613e5f613cfb565b5b613e6c84828501613aab565b60c08301525092915050565b600060208284031215613e8e57613e8d613480565b5b600082013567ffffffffffffffff811115613eac57613eab613485565b5b613eb884828501613d00565b91505092915050565b613eca8161348a565b82525050565b600060e0820190508181036000830152613eea818a613918565b9050613ef96020830189613ec1565b8181036040830152613f0b8188613918565b9050613f1a6060830187613ec1565b613f276080830186613ec1565b81810360a0830152613f398185613918565b905081810360c0830152613f4d8184613918565b905098975050505050505050565b600060e0830160008301518482036000860152613f78828261358c565b91505060208301518482036020860152613f92828261358c565b91505060408301518482036040860152613fac828261358c565b91505060608301518482036060860152613fc6828261358c565b91505060808301518482036080860152613fe0828261358c565b91505060a083015184820360a0860152613ffa828261358c565b91505060c083015184820360c0860152614014828261358c565b9150508091505092915050565b600060e083016000830151848203600086015261403e828261358c565b9150506020830151614053602086018261374d565b506040830151848203604086015261406b828261358c565b9150506060830151614080606086018261374d565b506080830151614093608086018261374d565b5060a083015184820360a08601526140ab828261358c565b91505060c083015184820360c08601526140c5828261358c565b9150508091505092915050565b600060408201905081810360008301526140ec8185613f5b565b905081810360208301526141008184614021565b90509392505050565b600060e0828403121561411f5761411e613cf6565b5b61412960e06139d8565b9050600082013567ffffffffffffffff81111561414957614148613cfb565b5b61415584828501613aab565b6000830152506020614169848285016134ab565b602083015250604082013567ffffffffffffffff81111561418d5761418c613cfb565b5b61419984828501613aab565b60408301525060606141ad848285016134ab565b60608301525060806141c1848285016134ab565b60808301525060a082013567ffffffffffffffff8111156141e5576141e4613cfb565b5b6141f184828501613aab565b60a08301525060c082013567ffffffffffffffff81111561421557614214613cfb565b5b61422184828501613aab565b60c08301525092915050565b6000806040838503121561424457614243613480565b5b600083013567ffffffffffffffff81111561426257614261613485565b5b61426e85828601613d00565b925050602083013567ffffffffffffffff81111561428f5761428e613485565b5b61429b85828601614109565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061431b57607f821691505b6020821081141561432f5761432e6142d4565b5b50919050565b600081905092915050565b60008190508160005260206000209050919050565b6000815461436281614303565b61436c8186614335565b945060018216600081146143875760018114614398576143cb565b60ff198316865281860193506143cb565b6143a185614340565b60005b838110156143c3578154818901526001820191506020810190506143a4565b838801955050505b50505092915050565b60006143e08284614355565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006144258261348a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614458576144576143eb565b5b600182019050919050565b600061446e8261348a565b91506144798361348a565b92508282101561448c5761448b6143eb565b5b828203905092915050565b60006144a28261348a565b91506144ad8361348a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156144e2576144e16143eb565b5b828201905092915050565b60006144f88261352c565b6145028185614335565b9350614512818560208601613548565b80840191505092915050565b600061452a82846144ed565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220d6549d6993b4cb3731f587f8bcfb11be0f1d368cfbf9484c985afa98e326dce064736f6c634300080a0033";

    public static final String FUNC_BATCHDELETE = "batchDelete";

    public static final String FUNC_DELETESTUDENT = "deleteStudent";

    public static final String FUNC_EXTRAINFOINSERTED = "extraInfoInserted";

    public static final String FUNC_EXTRAINFOKEY = "extraInfoKey";

    public static final String FUNC_EXTRAINFOS = "extraInfos";

    public static final String FUNC_GETALL = "getAll";

    public static final String FUNC_GETENTITY = "getEntity";

    public static final String FUNC_GETLISTPAGE = "getListPage";

    public static final String FUNC_INSTITUTIONINFOINSERTED = "institutionInfoInserted";

    public static final String FUNC_INSTITUTIONINFOKEY = "institutionInfoKey";

    public static final String FUNC_INSTITUTIONINFOS = "institutionInfos";

    public static final String FUNC_SAVE = "save";

    public static final Event DELETEEXTRAMSG_EVENT = new Event("DeleteExtraMsg",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    public static final Event DELETEMSG_EVENT = new Event("DeleteMsg",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    @Deprecated
    protected InstitutionContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected InstitutionContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected InstitutionContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected InstitutionContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<DeleteExtraMsgEventResponse> getDeleteExtraMsgEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DELETEEXTRAMSG_EVENT, transactionReceipt);
        ArrayList<DeleteExtraMsgEventResponse> responses = new ArrayList<DeleteExtraMsgEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DeleteExtraMsgEventResponse typedResponse = new DeleteExtraMsgEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.code = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DeleteExtraMsgEventResponse> deleteExtraMsgEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DeleteExtraMsgEventResponse>() {
            @Override
            public DeleteExtraMsgEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DELETEEXTRAMSG_EVENT, log);
                DeleteExtraMsgEventResponse typedResponse = new DeleteExtraMsgEventResponse();
                typedResponse.log = log;
                typedResponse.code = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DeleteExtraMsgEventResponse> deleteExtraMsgEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DELETEEXTRAMSG_EVENT));
        return deleteExtraMsgEventFlowable(filter);
    }

    public List<DeleteMsgEventResponse> getDeleteMsgEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DELETEMSG_EVENT, transactionReceipt);
        ArrayList<DeleteMsgEventResponse> responses = new ArrayList<DeleteMsgEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DeleteMsgEventResponse typedResponse = new DeleteMsgEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.code = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DeleteMsgEventResponse> deleteMsgEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DeleteMsgEventResponse>() {
            @Override
            public DeleteMsgEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DELETEMSG_EVENT, log);
                DeleteMsgEventResponse typedResponse = new DeleteMsgEventResponse();
                typedResponse.log = log;
                typedResponse.code = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DeleteMsgEventResponse> deleteMsgEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DELETEMSG_EVENT));
        return deleteMsgEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> batchDelete(List<String> idList) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BATCHDELETE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                        org.web3j.abi.datatypes.Utf8String.class,
                        org.web3j.abi.Utils.typeMap(idList, org.web3j.abi.datatypes.Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deleteStudent(InstitutionInfo _institution) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DELETESTUDENT,
                Arrays.<Type>asList(_institution),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> extraInfoInserted(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_EXTRAINFOINSERTED,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> extraInfoKey(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_EXTRAINFOKEY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple7<String, BigInteger, String, BigInteger, BigInteger, String, String>> extraInfos(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_EXTRAINFOS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple7<String, BigInteger, String, BigInteger, BigInteger, String, String>>(function,
                new Callable<Tuple7<String, BigInteger, String, BigInteger, BigInteger, String, String>>() {
                    @Override
                    public Tuple7<String, BigInteger, String, BigInteger, BigInteger, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, BigInteger, String, BigInteger, BigInteger, String, String>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (String) results.get(5).getValue(),
                                (String) results.get(6).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<List<InstitutionInfo>, List<ExtraInfo>>> getAll() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETALL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<InstitutionInfo>>() {}, new TypeReference<DynamicArray<ExtraInfo>>() {}));
        return new RemoteFunctionCall<Tuple2<List<InstitutionInfo>, List<ExtraInfo>>>(function,
                new Callable<Tuple2<List<InstitutionInfo>, List<ExtraInfo>>>() {
                    @Override
                    public Tuple2<List<InstitutionInfo>, List<ExtraInfo>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<InstitutionInfo>, List<ExtraInfo>>(
                                convertToNative((List<InstitutionInfo>) results.get(0).getValue()),
                                convertToNative((List<ExtraInfo>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<InstitutionInfo, ExtraInfo>> getEntity(InstitutionInfo _institution) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETENTITY,
                Arrays.<Type>asList(_institution),
                Arrays.<TypeReference<?>>asList(new TypeReference<InstitutionInfo>() {}, new TypeReference<ExtraInfo>() {}));
        return new RemoteFunctionCall<Tuple2<InstitutionInfo, ExtraInfo>>(function,
                new Callable<Tuple2<InstitutionInfo, ExtraInfo>>() {
                    @Override
                    public Tuple2<InstitutionInfo, ExtraInfo> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<InstitutionInfo, ExtraInfo>(
                                (InstitutionInfo) results.get(0),
                                (ExtraInfo) results.get(1));
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<List<InstitutionInfo>, List<ExtraInfo>>> getListPage(BigInteger begin, BigInteger end) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETLISTPAGE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(begin),
                        new org.web3j.abi.datatypes.generated.Uint256(end)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<InstitutionInfo>>() {}, new TypeReference<DynamicArray<ExtraInfo>>() {}));
        return new RemoteFunctionCall<Tuple2<List<InstitutionInfo>, List<ExtraInfo>>>(function,
                new Callable<Tuple2<List<InstitutionInfo>, List<ExtraInfo>>>() {
                    @Override
                    public Tuple2<List<InstitutionInfo>, List<ExtraInfo>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<InstitutionInfo>, List<ExtraInfo>>(
                                convertToNative((List<InstitutionInfo>) results.get(0).getValue()),
                                convertToNative((List<ExtraInfo>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<Boolean> institutionInfoInserted(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_INSTITUTIONINFOINSERTED,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> institutionInfoKey(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_INSTITUTIONINFOKEY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple7<String, String, String, String, String, String, String>> institutionInfos(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_INSTITUTIONINFOS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple7<String, String, String, String, String, String, String>>(function,
                new Callable<Tuple7<String, String, String, String, String, String, String>>() {
                    @Override
                    public Tuple7<String, String, String, String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, String, String, String, String, String>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (String) results.get(4).getValue(),
                                (String) results.get(5).getValue(),
                                (String) results.get(6).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> save(InstitutionInfo _institution, ExtraInfo _extraInfo) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAVE,
                Arrays.<Type>asList(_institution,
                        _extraInfo),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static InstitutionContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new InstitutionContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static InstitutionContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new InstitutionContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static InstitutionContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new InstitutionContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static InstitutionContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new InstitutionContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<InstitutionContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(InstitutionContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<InstitutionContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(InstitutionContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<InstitutionContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(InstitutionContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<InstitutionContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(InstitutionContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class InstitutionInfo extends DynamicStruct {
        public String id;

        public String account;

        public String password;

        public String institutionName;

        public String institutionPhone;

        public String institutionEmail;

        public String institutionPlace;

        public InstitutionInfo(String id, String account, String password, String institutionName, String institutionPhone, String institutionEmail, String institutionPlace) {
            super(new org.web3j.abi.datatypes.Utf8String(id),new org.web3j.abi.datatypes.Utf8String(account),new org.web3j.abi.datatypes.Utf8String(password),new org.web3j.abi.datatypes.Utf8String(institutionName),new org.web3j.abi.datatypes.Utf8String(institutionPhone),new org.web3j.abi.datatypes.Utf8String(institutionEmail),new org.web3j.abi.datatypes.Utf8String(institutionPlace));
            this.id = id;
            this.account = account;
            this.password = password;
            this.institutionName = institutionName;
            this.institutionPhone = institutionPhone;
            this.institutionEmail = institutionEmail;
            this.institutionPlace = institutionPlace;
        }

        public InstitutionInfo(Utf8String id, Utf8String account, Utf8String password, Utf8String institutionName, Utf8String institutionPhone, Utf8String institutionEmail, Utf8String institutionPlace) {
            super(id,account,password,institutionName,institutionPhone,institutionEmail,institutionPlace);
            this.id = id.getValue();
            this.account = account.getValue();
            this.password = password.getValue();
            this.institutionName = institutionName.getValue();
            this.institutionPhone = institutionPhone.getValue();
            this.institutionEmail = institutionEmail.getValue();
            this.institutionPlace = institutionPlace.getValue();
        }
    }

    public static class ExtraInfo extends DynamicStruct {
        public String id;

        public BigInteger status;

        public String authorCertificatePic;

        public BigInteger createTime;

        public BigInteger auditTime;

        public String message;

        public String reason;

        public ExtraInfo(String id, BigInteger status, String authorCertificatePic, BigInteger createTime, BigInteger auditTime, String message, String reason) {
            super(new org.web3j.abi.datatypes.Utf8String(id),new org.web3j.abi.datatypes.generated.Uint256(status),new org.web3j.abi.datatypes.Utf8String(authorCertificatePic),new org.web3j.abi.datatypes.generated.Uint256(createTime),new org.web3j.abi.datatypes.generated.Uint256(auditTime),new org.web3j.abi.datatypes.Utf8String(message),new org.web3j.abi.datatypes.Utf8String(reason));
            this.id = id;
            this.status = status;
            this.authorCertificatePic = authorCertificatePic;
            this.createTime = createTime;
            this.auditTime = auditTime;
            this.message = message;
            this.reason = reason;
        }

        public ExtraInfo(Utf8String id, Uint256 status, Utf8String authorCertificatePic, Uint256 createTime, Uint256 auditTime, Utf8String message, Utf8String reason) {
            super(id,status,authorCertificatePic,createTime,auditTime,message,reason);
            this.id = id.getValue();
            this.status = status.getValue();
            this.authorCertificatePic = authorCertificatePic.getValue();
            this.createTime = createTime.getValue();
            this.auditTime = auditTime.getValue();
            this.message = message.getValue();
            this.reason = reason.getValue();
        }
    }

    public static class DeleteExtraMsgEventResponse extends BaseEventResponse {
        public Boolean code;
    }

    public static class DeleteMsgEventResponse extends BaseEventResponse {
        public Boolean code;
    }
}

