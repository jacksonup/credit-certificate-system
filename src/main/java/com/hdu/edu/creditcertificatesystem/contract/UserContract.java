package com.hdu.edu.creditcertificatesystem.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
/**
 * @author 阵雨
 * @version 1.0
 */
@SuppressWarnings("rawtypes")
public class UserContract extends Contract {
    public static final String BINARY = "608060405260028054905060035534801561001957600080fd5b50612ca1806100296000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063658d90f41161008c578063b10c3cc911610066578063b10c3cc914610203578063be0a678014610233578063ed993ce314610263578063ee20930914610293576100cf565b8063658d90f4146101ad57806394c33b7d146101c957806398eed268146101e5576100cf565b80633848149e146100d4578063465c4105146100f25780634709161a1461012257806353ed51431461015757806359583c2a146101755780635aa9033c14610191575b600080fd5b6100dc6102c3565b6040516100e991906120a5565b60405180910390f35b61010c60048036038101906101079190612210565b6103d3565b60405161011991906122a3565b60405180910390f35b61013c600480360381019061013791906122be565b6104b0565b60405161014e96959493929190612360565b60405180910390f35b61015f610722565b60405161016c919061253d565b60405180910390f35b61018f600480360381019061018a9190612645565b610a66565b005b6101ab60048036038101906101a691906127d4565b610c9f565b005b6101c760048036038101906101c2919061281d565b610e76565b005b6101e360048036038101906101de91906127d4565b610f50565b005b6101ed61117b565b6040516101fa91906128f9565b60405180910390f35b61021d600480360381019061021891906127d4565b61154b565b60405161022a91906120a5565b60405180910390f35b61024d6004803603810190610248919061281d565b61181e565b60405161025a919061291b565b60405180910390f35b61027d6004803603810190610278919061293d565b6118ca565b60405161028a919061253d565b60405180910390f35b6102ad60048036038101906102a891906122be565b611d79565b6040516102ba91906122a3565b60405180910390f35b6102cb611daf565b6040518060c001604052806040518060400160405280600381526020017f686868000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600481526020017f3133323300000000000000000000000000000000000000000000000000000000815250815260200160008152602001606f81526020016040518060400160405280600581526020017f317133323300000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600581526020017f656d61696c000000000000000000000000000000000000000000000000000000815250815250905090565b600080839050600083905080518251146103f2576000925050506104aa565b60005b82518110156104a257818181518110610411576104106129ac565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916838281518110610451576104506129ac565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461048f57600093505050506104aa565b808061049a90612a0a565b9150506103f5565b506001925050505b92915050565b6000818051602081018201805184825260208301602085012081835280955050505050506000915090508060000180546104e990612a82565b80601f016020809104026020016040519081016040528092919081815260200182805461051590612a82565b80156105625780601f1061053757610100808354040283529160200191610562565b820191906000526020600020905b81548152906001019060200180831161054557829003601f168201915b50505050509080600101805461057790612a82565b80601f01602080910402602001604051908101604052809291908181526020018280546105a390612a82565b80156105f05780601f106105c5576101008083540402835291602001916105f0565b820191906000526020600020905b8154815290600101906020018083116105d357829003601f168201915b50505050509080600201549080600301549080600401805461061190612a82565b80601f016020809104026020016040519081016040528092919081815260200182805461063d90612a82565b801561068a5780601f1061065f5761010080835404028352916020019161068a565b820191906000526020600020905b81548152906001019060200180831161066d57829003601f168201915b50505050509080600501805461069f90612a82565b80601f01602080910402602001604051908101604052809291908181526020018280546106cb90612a82565b80156107185780601f106106ed57610100808354040283529160200191610718565b820191906000526020600020905b8154815290600101906020018083116106fb57829003601f168201915b5050505050905086565b606060028054905067ffffffffffffffff811115610743576107426120e5565b5b60405190808252806020026020018201604052801561077c57816020015b610769611daf565b8152602001906001900390816107615790505b50905060005b600280549050811015610a62576000600282815481106107a5576107a46129ac565b5b906000526020600020016040516107bc9190612b53565b90815260200160405180910390206040518060c00160405290816000820180546107e590612a82565b80601f016020809104026020016040519081016040528092919081815260200182805461081190612a82565b801561085e5780601f106108335761010080835404028352916020019161085e565b820191906000526020600020905b81548152906001019060200180831161084157829003601f168201915b5050505050815260200160018201805461087790612a82565b80601f01602080910402602001604051908101604052809291908181526020018280546108a390612a82565b80156108f05780601f106108c5576101008083540402835291602001916108f0565b820191906000526020600020905b8154815290600101906020018083116108d357829003601f168201915b50505050508152602001600282015481526020016003820154815260200160048201805461091d90612a82565b80601f016020809104026020016040519081016040528092919081815260200182805461094990612a82565b80156109965780601f1061096b57610100808354040283529160200191610996565b820191906000526020600020905b81548152906001019060200180831161097957829003601f168201915b505050505081526020016005820180546109af90612a82565b80601f01602080910402602001604051908101604052809291908181526020018280546109db90612a82565b8015610a285780601f106109fd57610100808354040283529160200191610a28565b820191906000526020600020905b815481529060010190602001808311610a0b57829003601f168201915b505050505081525050828281518110610a4457610a436129ac565b5b60200260200101819052508080610a5a90612a0a565b915050610782565b5090565b60005b8151811015610c9b576001828281518110610a8757610a866129ac565b5b6020026020010151604051610a9c9190612b9b565b908152602001604051809103902060009054906101000a900460ff1615610c4f576000806001848481518110610ad557610ad46129ac565b5b6020026020010151604051610aea9190612b9b565b908152602001604051809103902060006101000a81548160ff021916908315150217905550600090505b600280549050811015610c0857610beb838381518110610b3757610b366129ac565b5b602002602001015160028381548110610b5357610b526129ac565b5b906000526020600020018054610b6890612a82565b80601f0160208091040260200160405190810160405280929190818152602001828054610b9490612a82565b8015610be15780601f10610bb657610100808354040283529160200191610be1565b820191906000526020600020905b815481529060010190602001808311610bc457829003601f168201915b50505050506103d3565b15610bf557610c08565b8080610c0090612a0a565b915050610b14565b610c1181610e76565b7fcdb72d06565be2e6e4048e127d72c0d6cd72635cbae3d499c02100a7cd5c0a896001604051610c4191906122a3565b60405180910390a150610c88565b7fcdb72d06565be2e6e4048e127d72c0d6cd72635cbae3d499c02100a7cd5c0a896000604051610c7f91906122a3565b60405180910390a15b8080610c9390612a0a565b915050610a69565b5050565b60018160000151604051610cb39190612b9b565b908152602001604051809103902060009054906101000a900460ff1615610e3a5760008060018360000151604051610ceb9190612b9b565b908152602001604051809103902060006101000a81548160ff021916908315150217905550600090505b600280549050811015610df357610dd6826000015160028381548110610d3e57610d3d6129ac565b5b906000526020600020018054610d5390612a82565b80601f0160208091040260200160405190810160405280929190818152602001828054610d7f90612a82565b8015610dcc5780601f10610da157610100808354040283529160200191610dcc565b820191906000526020600020905b815481529060010190602001808311610daf57829003601f168201915b50505050506103d3565b15610de057610df3565b8080610deb90612a0a565b915050610d15565b610dfc81610e76565b7fcdb72d06565be2e6e4048e127d72c0d6cd72635cbae3d499c02100a7cd5c0a896001604051610e2c91906122a3565b60405180910390a150610e73565b7fcdb72d06565be2e6e4048e127d72c0d6cd72635cbae3d499c02100a7cd5c0a896000604051610e6a91906122a3565b60405180910390a15b50565b60006002805490509050808210610e8d5750610f4d565b60008290505b600182610ea09190612bb2565b811015610f1a576002600182610eb69190612be6565b81548110610ec757610ec66129ac565b5b9060005260206000200160028281548110610ee557610ee46129ac565b5b90600052602060002001908054610efb90612a82565b610f06929190611de5565b508080610f1290612a0a565b915050610e93565b506002805480610f2d57610f2c612c3c565b5b600190038181906000526020600020016000610f499190611e72565b9055505b50565b60018160000151604051610f649190612b9b565b908152602001604051809103902060009054906101000a900460ff166110c9578060008260000151604051610f999190612b9b565b90815260200160405180910390206000820151816000019080519060200190610fc3929190611eb2565b506020820151816001019080519060200190610fe0929190611eb2565b5060408201518160020155606082015181600301556080820151816004019080519060200190611011929190611eb2565b5060a082015181600501908051906020019061102e929190611eb2565b5090505060018082600001516040516110479190612b9b565b908152602001604051809103902060006101000a81548160ff021916908315150217905550600281600001519080600181540180825580915050600190039060005260206000200160009091909190915090805190602001906110ab929190611eb2565b50600360008154809291906110bf90612a0a565b9190505550611178565b80600082600001516040516110de9190612b9b565b90815260200160405180910390206000820151816000019080519060200190611108929190611eb2565b506020820151816001019080519060200190611125929190611eb2565b5060408201518160020155606082015181600301556080820151816004019080519060200190611156929190611eb2565b5060a0820151816005019080519060200190611173929190611eb2565b509050505b50565b6060600767ffffffffffffffff811115611198576111976120e5565b5b6040519080825280602002602001820160405280156111c65781602001602082028036833780820191505090505b50905060006002805490508282806111dd90612a0a565b9350815181106111f0576111ef6129ac565b5b60200260200101818152505060008060008060008060005b600280549050811015611444576000806002838154811061122c5761122b6129ac565b5b906000526020600020016040516112439190612b53565b908152602001604051809103902060020154141561126e57868061126690612a0a565b975050611431565b6001600060028381548110611286576112856129ac565b5b9060005260206000200160405161129d9190612b53565b90815260200160405180910390206002015414156112c85785806112c090612a0a565b965050611430565b60026000600283815481106112e0576112df6129ac565b5b906000526020600020016040516112f79190612b53565b908152602001604051809103902060020154141561132257848061131a90612a0a565b95505061142f565b600360006002838154811061133a576113396129ac565b5b906000526020600020016040516113519190612b53565b908152602001604051809103902060020154141561137c57838061137490612a0a565b94505061142e565b6004600060028381548110611394576113936129ac565b5b906000526020600020016040516113ab9190612b53565b90815260200160405180910390206002015414156113d65782806113ce90612a0a565b93505061142d565b60056000600283815481106113ee576113ed6129ac565b5b906000526020600020016040516114059190612b53565b908152602001604051809103902060020154141561142c57818061142890612a0a565b9250505b5b5b5b5b5b808061143c90612a0a565b915050611208565b508588888061145290612a0a565b995081518110611465576114646129ac565b5b6020026020010181815250508488888061147e90612a0a565b995081518110611491576114906129ac565b5b602002602001018181525050838888806114aa90612a0a565b9950815181106114bd576114bc6129ac565b5b602002602001018181525050828888806114d690612a0a565b9950815181106114e9576114e86129ac565b5b6020026020010181815250508188888061150290612a0a565b995081518110611515576115146129ac565b5b60200260200101818152505080888881518110611535576115346129ac565b5b6020026020010181815250505050505050505090565b611553611daf565b600182600001516040516115679190612b9b565b908152602001604051809103902060009054906101000a900460ff1615611818576000826000015160405161159c9190612b9b565b90815260200160405180910390206040518060c00160405290816000820180546115c590612a82565b80601f01602080910402602001604051908101604052809291908181526020018280546115f190612a82565b801561163e5780601f106116135761010080835404028352916020019161163e565b820191906000526020600020905b81548152906001019060200180831161162157829003601f168201915b5050505050815260200160018201805461165790612a82565b80601f016020809104026020016040519081016040528092919081815260200182805461168390612a82565b80156116d05780601f106116a5576101008083540402835291602001916116d0565b820191906000526020600020905b8154815290600101906020018083116116b357829003601f168201915b5050505050815260200160028201548152602001600382015481526020016004820180546116fd90612a82565b80601f016020809104026020016040519081016040528092919081815260200182805461172990612a82565b80156117765780601f1061174b57610100808354040283529160200191611776565b820191906000526020600020905b81548152906001019060200180831161175957829003601f168201915b5050505050815260200160058201805461178f90612a82565b80601f01602080910402602001604051908101604052809291908181526020018280546117bb90612a82565b80156118085780601f106117dd57610100808354040283529160200191611808565b820191906000526020600020905b8154815290600101906020018083116117eb57829003601f168201915b5050505050815250509050611819565b5b919050565b6002818154811061182e57600080fd5b90600052602060002001600091509050805461184990612a82565b80601f016020809104026020016040519081016040528092919081815260200182805461187590612a82565b80156118c25780601f10611897576101008083540402835291602001916118c2565b820191906000526020600020905b8154815290600101906020018083116118a557829003601f168201915b505050505081565b6060600060028054905067ffffffffffffffff8111156118ed576118ec6120e5565b5b60405190808252806020026020018201604052801561192657816020015b611913611daf565b81526020019060019003908161190b5790505b5090506000805b600280549050811015611c64576000600282815481106119505761194f6129ac565b5b906000526020600020016040516119679190612b53565b90815260200160405180910390206002015487604001511415611c515760006002828154811061199a576119996129ac565b5b906000526020600020016040516119b19190612b53565b90815260200160405180910390206040518060c00160405290816000820180546119da90612a82565b80601f0160208091040260200160405190810160405280929190818152602001828054611a0690612a82565b8015611a535780601f10611a2857610100808354040283529160200191611a53565b820191906000526020600020905b815481529060010190602001808311611a3657829003601f168201915b50505050508152602001600182018054611a6c90612a82565b80601f0160208091040260200160405190810160405280929190818152602001828054611a9890612a82565b8015611ae55780601f10611aba57610100808354040283529160200191611ae5565b820191906000526020600020905b815481529060010190602001808311611ac857829003601f168201915b505050505081526020016002820154815260200160038201548152602001600482018054611b1290612a82565b80601f0160208091040260200160405190810160405280929190818152602001828054611b3e90612a82565b8015611b8b5780601f10611b6057610100808354040283529160200191611b8b565b820191906000526020600020905b815481529060010190602001808311611b6e57829003601f168201915b50505050508152602001600582018054611ba490612a82565b80601f0160208091040260200160405190810160405280929190818152602001828054611bd090612a82565b8015611c1d5780601f10611bf257610100808354040283529160200191611c1d565b820191906000526020600020905b815481529060010190602001808311611c0057829003601f168201915b505050505081525050838380611c3290612a0a565b945081518110611c4557611c446129ac565b5b60200260200101819052505b8080611c5c90612a0a565b91505061192d565b5084841015611c74575050611d72565b600181611c819190612bb2565b841115611c9857600181611c959190612bb2565b93505b60018585611ca69190612bb2565b611cb09190612be6565b67ffffffffffffffff811115611cc957611cc86120e5565b5b604051908082528060200260200182016040528015611d0257816020015b611cef611daf565b815260200190600190039081611ce75790505b5092506000905060008590505b848111611d6e57828181518110611d2957611d286129ac565b5b6020026020010151848380611d3d90612a0a565b945081518110611d5057611d4f6129ac565b5b60200260200101819052508080611d6690612a0a565b915050611d0f565b5050505b9392505050565b6001818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460ff1681565b6040518060c001604052806060815260200160608152602001600081526020016000815260200160608152602001606081525090565b828054611df190612a82565b90600052602060002090601f016020900481019282611e135760008555611e61565b82601f10611e245780548555611e61565b82800160010185558215611e6157600052602060002091601f016020900482015b82811115611e60578254825591600101919060010190611e45565b5b509050611e6e9190611f38565b5090565b508054611e7e90612a82565b6000825580601f10611e905750611eaf565b601f016020900490600052602060002090810190611eae9190611f38565b5b50565b828054611ebe90612a82565b90600052602060002090601f016020900481019282611ee05760008555611f27565b82601f10611ef957805160ff1916838001178555611f27565b82800160010185558215611f27579182015b82811115611f26578251825591602001919060010190611f0b565b5b509050611f349190611f38565b5090565b5b80821115611f51576000816000905550600101611f39565b5090565b600081519050919050565b600082825260208201905092915050565b60005b83811015611f8f578082015181840152602081019050611f74565b83811115611f9e576000848401525b50505050565b6000601f19601f8301169050919050565b6000611fc082611f55565b611fca8185611f60565b9350611fda818560208601611f71565b611fe381611fa4565b840191505092915050565b6000819050919050565b61200181611fee565b82525050565b600060c08301600083015184820360008601526120248282611fb5565b9150506020830151848203602086015261203e8282611fb5565b91505060408301516120536040860182611ff8565b5060608301516120666060860182611ff8565b506080830151848203608086015261207e8282611fb5565b91505060a083015184820360a08601526120988282611fb5565b9150508091505092915050565b600060208201905081810360008301526120bf8184612007565b905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61211d82611fa4565b810181811067ffffffffffffffff8211171561213c5761213b6120e5565b5b80604052505050565b600061214f6120c7565b905061215b8282612114565b919050565b600067ffffffffffffffff82111561217b5761217a6120e5565b5b61218482611fa4565b9050602081019050919050565b82818337600083830152505050565b60006121b36121ae84612160565b612145565b9050828152602081018484840111156121cf576121ce6120e0565b5b6121da848285612191565b509392505050565b600082601f8301126121f7576121f66120db565b5b81356122078482602086016121a0565b91505092915050565b60008060408385031215612227576122266120d1565b5b600083013567ffffffffffffffff811115612245576122446120d6565b5b612251858286016121e2565b925050602083013567ffffffffffffffff811115612272576122716120d6565b5b61227e858286016121e2565b9150509250929050565b60008115159050919050565b61229d81612288565b82525050565b60006020820190506122b86000830184612294565b92915050565b6000602082840312156122d4576122d36120d1565b5b600082013567ffffffffffffffff8111156122f2576122f16120d6565b5b6122fe848285016121e2565b91505092915050565b600082825260208201905092915050565b600061232382611f55565b61232d8185612307565b935061233d818560208601611f71565b61234681611fa4565b840191505092915050565b61235a81611fee565b82525050565b600060c082019050818103600083015261237a8189612318565b9050818103602083015261238e8188612318565b905061239d6040830187612351565b6123aa6060830186612351565b81810360808301526123bc8185612318565b905081810360a08301526123d08184612318565b9050979650505050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060c08301600083015184820360008601526124268282611fb5565b915050602083015184820360208601526124408282611fb5565b91505060408301516124556040860182611ff8565b5060608301516124686060860182611ff8565b50608083015184820360808601526124808282611fb5565b91505060a083015184820360a086015261249a8282611fb5565b9150508091505092915050565b60006124b38383612409565b905092915050565b6000602082019050919050565b60006124d3826123dd565b6124dd81856123e8565b9350836020820285016124ef856123f9565b8060005b8581101561252b578484038952815161250c85826124a7565b9450612517836124bb565b925060208a019950506001810190506124f3565b50829750879550505050505092915050565b6000602082019050818103600083015261255781846124c8565b905092915050565b600067ffffffffffffffff82111561257a576125796120e5565b5b602082029050602081019050919050565b600080fd5b60006125a361259e8461255f565b612145565b905080838252602082019050602084028301858111156125c6576125c561258b565b5b835b8181101561260d57803567ffffffffffffffff8111156125eb576125ea6120db565b5b8086016125f889826121e2565b855260208501945050506020810190506125c8565b5050509392505050565b600082601f83011261262c5761262b6120db565b5b813561263c848260208601612590565b91505092915050565b60006020828403121561265b5761265a6120d1565b5b600082013567ffffffffffffffff811115612679576126786120d6565b5b61268584828501612617565b91505092915050565b600080fd5b600080fd5b6126a181611fee565b81146126ac57600080fd5b50565b6000813590506126be81612698565b92915050565b600060c082840312156126da576126d961268e565b5b6126e460c0612145565b9050600082013567ffffffffffffffff81111561270457612703612693565b5b612710848285016121e2565b600083015250602082013567ffffffffffffffff81111561273457612733612693565b5b612740848285016121e2565b6020830152506040612754848285016126af565b6040830152506060612768848285016126af565b606083015250608082013567ffffffffffffffff81111561278c5761278b612693565b5b612798848285016121e2565b60808301525060a082013567ffffffffffffffff8111156127bc576127bb612693565b5b6127c8848285016121e2565b60a08301525092915050565b6000602082840312156127ea576127e96120d1565b5b600082013567ffffffffffffffff811115612808576128076120d6565b5b612814848285016126c4565b91505092915050565b600060208284031215612833576128326120d1565b5b6000612841848285016126af565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006128828383611ff8565b60208301905092915050565b6000602082019050919050565b60006128a68261284a565b6128b08185612855565b93506128bb83612866565b8060005b838110156128ec5781516128d38882612876565b97506128de8361288e565b9250506001810190506128bf565b5085935050505092915050565b60006020820190508181036000830152612913818461289b565b905092915050565b600060208201905081810360008301526129358184612318565b905092915050565b600080600060608486031215612956576129556120d1565b5b600084013567ffffffffffffffff811115612974576129736120d6565b5b612980868287016126c4565b9350506020612991868287016126af565b92505060406129a2868287016126af565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612a1582611fee565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612a4857612a476129db565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612a9a57607f821691505b60208210811415612aae57612aad612a53565b5b50919050565b600081905092915050565b60008190508160005260206000209050919050565b60008154612ae181612a82565b612aeb8186612ab4565b94506001821660008114612b065760018114612b1757612b4a565b60ff19831686528186019350612b4a565b612b2085612abf565b60005b83811015612b4257815481890152600182019150602081019050612b23565b838801955050505b50505092915050565b6000612b5f8284612ad4565b915081905092915050565b6000612b7582611f55565b612b7f8185612ab4565b9350612b8f818560208601611f71565b80840191505092915050565b6000612ba78284612b6a565b915081905092915050565b6000612bbd82611fee565b9150612bc883611fee565b925082821015612bdb57612bda6129db565b5b828203905092915050565b6000612bf182611fee565b9150612bfc83611fee565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612c3157612c306129db565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212209660d4b88381ed4b45708943c39d462bf80d5ec59bc1f126c9126ba20fcd5d7464736f6c634300080a0033";

    public static final String FUNC_BATCHDELETE = "batchDelete";

    public static final String FUNC_DELETEUSER = "deleteUser";

    public static final String FUNC_GETAUSEINFO = "getAUseInfo";

    public static final String FUNC_GETALL = "getAll";

    public static final String FUNC_GETCOUNTSBYROLE = "getCountsByRole";

    public static final String FUNC_GETENTITY = "getEntity";

    public static final String FUNC_GETROLELISTPAGE = "getRoleListPage";

    public static final String FUNC_ISEQUAL = "isEqual";

    public static final String FUNC_REMOVEUSERINFOKEYATINDEX = "removeUserInfoKeyAtIndex";

    public static final String FUNC_SAVE = "save";

    public static final String FUNC_USERINFOINSERTED = "userInfoInserted";

    public static final String FUNC_USERINFOKEY = "userInfoKey";

    public static final String FUNC_USERINFOS = "userInfos";

    public static final Event DELETEMSG_EVENT = new Event("DeleteMsg",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    @Deprecated
    protected UserContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected UserContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected UserContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected UserContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<DeleteMsgEventResponse> getDeleteMsgEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DELETEMSG_EVENT, transactionReceipt);
        ArrayList<DeleteMsgEventResponse> responses = new ArrayList<DeleteMsgEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DeleteMsgEventResponse typedResponse = new DeleteMsgEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.code = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DeleteMsgEventResponse> deleteMsgEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DeleteMsgEventResponse>() {
            @Override
            public DeleteMsgEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DELETEMSG_EVENT, log);
                DeleteMsgEventResponse typedResponse = new DeleteMsgEventResponse();
                typedResponse.log = log;
                typedResponse.code = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DeleteMsgEventResponse> deleteMsgEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DELETEMSG_EVENT));
        return deleteMsgEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> batchDelete(List<String> accountList) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BATCHDELETE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                        org.web3j.abi.datatypes.Utf8String.class,
                        org.web3j.abi.Utils.typeMap(accountList, org.web3j.abi.datatypes.Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deleteUser(UserInfo _user) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DELETEUSER,
                Arrays.<Type>asList(_user),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<UserInfo> getAUseInfo() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAUSEINFO,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<UserInfo>() {}));
        return executeRemoteCallSingleValueReturn(function, UserInfo.class);
    }

    public RemoteFunctionCall<List> getAll() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETALL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<UserInfo>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getCountsByRole() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCOUNTSBYROLE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<UserInfo> getEntity(UserInfo _user) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETENTITY,
                Arrays.<Type>asList(_user),
                Arrays.<TypeReference<?>>asList(new TypeReference<UserInfo>() {}));
        return executeRemoteCallSingleValueReturn(function, UserInfo.class);
    }

    public RemoteFunctionCall<List> getRoleListPage(UserInfo _userInfo, BigInteger begin, BigInteger end) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROLELISTPAGE,
                Arrays.<Type>asList(_userInfo,
                        new org.web3j.abi.datatypes.generated.Uint256(begin),
                        new org.web3j.abi.datatypes.generated.Uint256(end)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<UserInfo>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Boolean> isEqual(String a, String b) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISEQUAL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(a),
                        new org.web3j.abi.datatypes.Utf8String(b)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> removeUserInfoKeyAtIndex(BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REMOVEUSERINFOKEYATINDEX,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> save(UserInfo _user) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAVE,
                Arrays.<Type>asList(_user),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> userInfoInserted(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_USERINFOINSERTED,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> userInfoKey(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_USERINFOKEY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple6<String, String, BigInteger, BigInteger, String, String>> userInfos(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_USERINFOS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple6<String, String, BigInteger, BigInteger, String, String>>(function,
                new Callable<Tuple6<String, String, BigInteger, BigInteger, String, String>>() {
                    @Override
                    public Tuple6<String, String, BigInteger, BigInteger, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, String, BigInteger, BigInteger, String, String>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (String) results.get(4).getValue(),
                                (String) results.get(5).getValue());
                    }
                });
    }

    @Deprecated
    public static UserContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new UserContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static UserContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new UserContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static UserContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new UserContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static UserContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new UserContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<UserContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(UserContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<UserContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(UserContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<UserContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(UserContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<UserContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(UserContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class UserInfo extends DynamicStruct {
        public String account;

        public String password;

        public BigInteger role;

        public BigInteger createTime;

        public String phone;

        public String email;

        public UserInfo(String account, String password, BigInteger role, BigInteger createTime, String phone, String email) {
            super(new org.web3j.abi.datatypes.Utf8String(account),new org.web3j.abi.datatypes.Utf8String(password),new org.web3j.abi.datatypes.generated.Uint256(role),new org.web3j.abi.datatypes.generated.Uint256(createTime),new org.web3j.abi.datatypes.Utf8String(phone),new org.web3j.abi.datatypes.Utf8String(email));
            this.account = account;
            this.password = password;
            this.role = role;
            this.createTime = createTime;
            this.phone = phone;
            this.email = email;
        }

        public UserInfo(Utf8String account, Utf8String password, Uint256 role, Uint256 createTime, Utf8String phone, Utf8String email) {
            super(account,password,role,createTime,phone,email);
            this.account = account.getValue();
            this.password = password.getValue();
            this.role = role.getValue();
            this.createTime = createTime.getValue();
            this.phone = phone.getValue();
            this.email = email.getValue();
        }
    }

    public static class DeleteMsgEventResponse extends BaseEventResponse {
        public Boolean code;
    }
}