package com.hdu.edu.creditcertificatesystem.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
/**
 * @author 阵雨
 * @version 1.0
 */
@SuppressWarnings("rawtypes")
public class CompetitionContract extends Contract {
    public static final String BINARY = "608060405260028054905060035534801561001957600080fd5b5061239c806100296000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806359583c2a1161007157806359583c2a146101785780637a97d672146101945780638ddce655146101c4578063b914f6e4146101e0578063e8bd598c14610215578063f2c4834c14610231576100a9565b80630db7c7e1146100ae578063208e8ebe146100de578063465c4105146100fa578063485c79471461012a57806353ed51431461015a575b600080fd5b6100c860048036038101906100c391906118db565b610261565b6040516100d5919061193f565b60405180910390f35b6100f860048036038101906100f39190611a8e565b610297565b005b610114600480360381019061010f9190611ad7565b61046e565b604051610121919061193f565b60405180910390f35b610144600480360381019061013f9190611b4f565b61054b565b6040516101519190611d7f565b60405180910390f35b610162610926565b60405161016f9190611d7f565b60405180910390f35b610192600480360381019061018d9190611e87565b610be2565b005b6101ae60048036038101906101a99190611a8e565b610e1b565b6040516101bb9190611f67565b60405180910390f35b6101de60048036038101906101d99190611f89565b611066565b005b6101fa60048036038101906101f591906118db565b611140565b60405161020c9695949392919061200f565b60405180910390f35b61022f600480360381019061022a9190611a8e565b61132a565b005b61024b60048036038101906102469190611f89565b61152f565b6040516102589190612085565b60405180910390f35b6001818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460ff1681565b600181600001516040516102ab91906120e3565b908152602001604051809103902060009054906101000a900460ff161561043257600080600183600001516040516102e391906120e3565b908152602001604051809103902060006101000a81548160ff021916908315150217905550600090505b6002805490508110156103eb576103ce826000015160028381548110610336576103356120fa565b5b90600052602060002001805461034b90612158565b80601f016020809104026020016040519081016040528092919081815260200182805461037790612158565b80156103c45780601f10610399576101008083540402835291602001916103c4565b820191906000526020600020905b8154815290600101906020018083116103a757829003601f168201915b505050505061046e565b156103d8576103eb565b80806103e3906121b9565b91505061030d565b6103f481611066565b7fcdb72d06565be2e6e4048e127d72c0d6cd72635cbae3d499c02100a7cd5c0a896001604051610424919061193f565b60405180910390a15061046b565b7fcdb72d06565be2e6e4048e127d72c0d6cd72635cbae3d499c02100a7cd5c0a896000604051610462919061193f565b60405180910390a15b50565b6000808390506000839050805182511461048d57600092505050610545565b60005b825181101561053d578181815181106104ac576104ab6120fa565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168382815181106104ec576104eb6120fa565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461052a5760009350505050610545565b8080610535906121b9565b915050610490565b506001925050505b92915050565b6060600060028054905067ffffffffffffffff81111561056e5761056d6117b0565b5b6040519080825280602002602001820160405280156105a757816020015b6105946115db565b81526020019060019003908161058c5790505b5090506000805b600280549050811015610812576000600282815481106105d1576105d06120fa565b5b906000526020600020016040516105e89190612296565b90815260200160405180910390206040518060c001604052908160008201805461061190612158565b80601f016020809104026020016040519081016040528092919081815260200182805461063d90612158565b801561068a5780601f1061065f5761010080835404028352916020019161068a565b820191906000526020600020905b81548152906001019060200180831161066d57829003601f168201915b505050505081526020016001820180546106a390612158565b80601f01602080910402602001604051908101604052809291908181526020018280546106cf90612158565b801561071c5780601f106106f15761010080835404028352916020019161071c565b820191906000526020600020905b8154815290600101906020018083116106ff57829003601f168201915b5050505050815260200160028201548152602001600382015481526020016004820154815260200160058201805461075390612158565b80601f016020809104026020016040519081016040528092919081815260200182805461077f90612158565b80156107cc5780601f106107a1576101008083540402835291602001916107cc565b820191906000526020600020905b8154815290600101906020018083116107af57829003601f168201915b5050505050815250508383806107e1906121b9565b9450815181106107f4576107f36120fa565b5b6020026020010181905250808061080a906121b9565b9150506105ae565b5084841015610822575050610920565b60018161082f91906122ad565b8411156108465760018161084391906122ad565b93505b6001858561085491906122ad565b61085e91906122e1565b67ffffffffffffffff811115610877576108766117b0565b5b6040519080825280602002602001820160405280156108b057816020015b61089d6115db565b8152602001906001900390816108955790505b5092506000905060008590505b84811161091c578281815181106108d7576108d66120fa565b5b60200260200101518483806108eb906121b9565b9450815181106108fe576108fd6120fa565b5b60200260200101819052508080610914906121b9565b9150506108bd565b5050505b92915050565b606060028054905067ffffffffffffffff811115610947576109466117b0565b5b60405190808252806020026020018201604052801561098057816020015b61096d6115db565b8152602001906001900390816109655790505b50905060005b600280549050811015610bde576000600282815481106109a9576109a86120fa565b5b906000526020600020016040516109c09190612296565b90815260200160405180910390206040518060c00160405290816000820180546109e990612158565b80601f0160208091040260200160405190810160405280929190818152602001828054610a1590612158565b8015610a625780601f10610a3757610100808354040283529160200191610a62565b820191906000526020600020905b815481529060010190602001808311610a4557829003601f168201915b50505050508152602001600182018054610a7b90612158565b80601f0160208091040260200160405190810160405280929190818152602001828054610aa790612158565b8015610af45780601f10610ac957610100808354040283529160200191610af4565b820191906000526020600020905b815481529060010190602001808311610ad757829003601f168201915b50505050508152602001600282015481526020016003820154815260200160048201548152602001600582018054610b2b90612158565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5790612158565b8015610ba45780601f10610b7957610100808354040283529160200191610ba4565b820191906000526020600020905b815481529060010190602001808311610b8757829003601f168201915b505050505081525050828281518110610bc057610bbf6120fa565b5b60200260200101819052508080610bd6906121b9565b915050610986565b5090565b60005b8151811015610e17576001828281518110610c0357610c026120fa565b5b6020026020010151604051610c1891906120e3565b908152602001604051809103902060009054906101000a900460ff1615610dcb576000806001848481518110610c5157610c506120fa565b5b6020026020010151604051610c6691906120e3565b908152602001604051809103902060006101000a81548160ff021916908315150217905550600090505b600280549050811015610d8457610d67838381518110610cb357610cb26120fa565b5b602002602001015160028381548110610ccf57610cce6120fa565b5b906000526020600020018054610ce490612158565b80601f0160208091040260200160405190810160405280929190818152602001828054610d1090612158565b8015610d5d5780601f10610d3257610100808354040283529160200191610d5d565b820191906000526020600020905b815481529060010190602001808311610d4057829003601f168201915b505050505061046e565b15610d7157610d84565b8080610d7c906121b9565b915050610c90565b610d8d81611066565b7fcdb72d06565be2e6e4048e127d72c0d6cd72635cbae3d499c02100a7cd5c0a896001604051610dbd919061193f565b60405180910390a150610e04565b7fcdb72d06565be2e6e4048e127d72c0d6cd72635cbae3d499c02100a7cd5c0a896000604051610dfb919061193f565b60405180910390a15b8080610e0f906121b9565b915050610be5565b5050565b610e236115db565b60018260000151604051610e3791906120e3565b908152602001604051809103902060009054906101000a900460ff16156110605760008260000151604051610e6c91906120e3565b90815260200160405180910390206040518060c0016040529081600082018054610e9590612158565b80601f0160208091040260200160405190810160405280929190818152602001828054610ec190612158565b8015610f0e5780601f10610ee357610100808354040283529160200191610f0e565b820191906000526020600020905b815481529060010190602001808311610ef157829003601f168201915b50505050508152602001600182018054610f2790612158565b80601f0160208091040260200160405190810160405280929190818152602001828054610f5390612158565b8015610fa05780601f10610f7557610100808354040283529160200191610fa0565b820191906000526020600020905b815481529060010190602001808311610f8357829003601f168201915b50505050508152602001600282015481526020016003820154815260200160048201548152602001600582018054610fd790612158565b80601f016020809104026020016040519081016040528092919081815260200182805461100390612158565b80156110505780601f1061102557610100808354040283529160200191611050565b820191906000526020600020905b81548152906001019060200180831161103357829003601f168201915b5050505050815250509050611061565b5b919050565b6000600280549050905080821061107d575061113d565b60008290505b60018261109091906122ad565b81101561110a5760026001826110a691906122e1565b815481106110b7576110b66120fa565b5b90600052602060002001600282815481106110d5576110d46120fa565b5b906000526020600020019080546110eb90612158565b6110f6929190611611565b508080611102906121b9565b915050611083565b50600280548061111d5761111c612337565b5b600190038181906000526020600020016000611139919061169e565b9055505b50565b60008180516020810182018051848252602083016020850120818352809550505050505060009150905080600001805461117990612158565b80601f01602080910402602001604051908101604052809291908181526020018280546111a590612158565b80156111f25780601f106111c7576101008083540402835291602001916111f2565b820191906000526020600020905b8154815290600101906020018083116111d557829003601f168201915b50505050509080600101805461120790612158565b80601f016020809104026020016040519081016040528092919081815260200182805461123390612158565b80156112805780601f1061125557610100808354040283529160200191611280565b820191906000526020600020905b81548152906001019060200180831161126357829003601f168201915b5050505050908060020154908060030154908060040154908060050180546112a790612158565b80601f01602080910402602001604051908101604052809291908181526020018280546112d390612158565b80156113205780601f106112f557610100808354040283529160200191611320565b820191906000526020600020905b81548152906001019060200180831161130357829003601f168201915b5050505050905086565b6001816000015160405161133e91906120e3565b908152602001604051809103902060009054906101000a900460ff1661149057806000826000015160405161137391906120e3565b9081526020016040518091039020600082015181600001908051906020019061139d9291906116de565b5060208201518160010190805190602001906113ba9291906116de565b5060408201518160020155606082015181600301556080820151816004015560a08201518160050190805190602001906113f59291906116de565b50905050600180826000015160405161140e91906120e3565b908152602001604051809103902060006101000a81548160ff021916908315150217905550600281600001519080600181540180825580915050600190039060005260206000200160009091909190915090805190602001906114729291906116de565b5060036000815480929190611486906121b9565b919050555061152c565b80600082600001516040516114a591906120e3565b908152602001604051809103902060008201518160000190805190602001906114cf9291906116de565b5060208201518160010190805190602001906114ec9291906116de565b5060408201518160020155606082015181600301556080820151816004015560a08201518160050190805190602001906115279291906116de565b509050505b50565b6002818154811061153f57600080fd5b90600052602060002001600091509050805461155a90612158565b80601f016020809104026020016040519081016040528092919081815260200182805461158690612158565b80156115d35780601f106115a8576101008083540402835291602001916115d3565b820191906000526020600020905b8154815290600101906020018083116115b657829003601f168201915b505050505081565b6040518060c001604052806060815260200160608152602001600081526020016000815260200160008152602001606081525090565b82805461161d90612158565b90600052602060002090601f01602090048101928261163f576000855561168d565b82601f10611650578054855561168d565b8280016001018555821561168d57600052602060002091601f016020900482015b8281111561168c578254825591600101919060010190611671565b5b50905061169a9190611764565b5090565b5080546116aa90612158565b6000825580601f106116bc57506116db565b601f0160209004906000526020600020908101906116da9190611764565b5b50565b8280546116ea90612158565b90600052602060002090601f01602090048101928261170c5760008555611753565b82601f1061172557805160ff1916838001178555611753565b82800160010185558215611753579182015b82811115611752578251825591602001919060010190611737565b5b5090506117609190611764565b5090565b5b8082111561177d576000816000905550600101611765565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6117e88261179f565b810181811067ffffffffffffffff82111715611807576118066117b0565b5b80604052505050565b600061181a611781565b905061182682826117df565b919050565b600067ffffffffffffffff821115611846576118456117b0565b5b61184f8261179f565b9050602081019050919050565b82818337600083830152505050565b600061187e6118798461182b565b611810565b90508281526020810184848401111561189a5761189961179a565b5b6118a584828561185c565b509392505050565b600082601f8301126118c2576118c1611795565b5b81356118d284826020860161186b565b91505092915050565b6000602082840312156118f1576118f061178b565b5b600082013567ffffffffffffffff81111561190f5761190e611790565b5b61191b848285016118ad565b91505092915050565b60008115159050919050565b61193981611924565b82525050565b60006020820190506119546000830184611930565b92915050565b600080fd5b600080fd5b6000819050919050565b61197781611964565b811461198257600080fd5b50565b6000813590506119948161196e565b92915050565b600060c082840312156119b0576119af61195a565b5b6119ba60c0611810565b9050600082013567ffffffffffffffff8111156119da576119d961195f565b5b6119e6848285016118ad565b600083015250602082013567ffffffffffffffff811115611a0a57611a0961195f565b5b611a16848285016118ad565b6020830152506040611a2a84828501611985565b6040830152506060611a3e84828501611985565b6060830152506080611a5284828501611985565b60808301525060a082013567ffffffffffffffff811115611a7657611a7561195f565b5b611a82848285016118ad565b60a08301525092915050565b600060208284031215611aa457611aa361178b565b5b600082013567ffffffffffffffff811115611ac257611ac1611790565b5b611ace8482850161199a565b91505092915050565b60008060408385031215611aee57611aed61178b565b5b600083013567ffffffffffffffff811115611b0c57611b0b611790565b5b611b18858286016118ad565b925050602083013567ffffffffffffffff811115611b3957611b38611790565b5b611b45858286016118ad565b9150509250929050565b60008060408385031215611b6657611b6561178b565b5b6000611b7485828601611985565b9250506020611b8585828601611985565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611bf5578082015181840152602081019050611bda565b83811115611c04576000848401525b50505050565b6000611c1582611bbb565b611c1f8185611bc6565b9350611c2f818560208601611bd7565b611c388161179f565b840191505092915050565b611c4c81611964565b82525050565b600060c0830160008301518482036000860152611c6f8282611c0a565b91505060208301518482036020860152611c898282611c0a565b9150506040830151611c9e6040860182611c43565b506060830151611cb16060860182611c43565b506080830151611cc46080860182611c43565b5060a083015184820360a0860152611cdc8282611c0a565b9150508091505092915050565b6000611cf58383611c52565b905092915050565b6000602082019050919050565b6000611d1582611b8f565b611d1f8185611b9a565b935083602082028501611d3185611bab565b8060005b85811015611d6d5784840389528151611d4e8582611ce9565b9450611d5983611cfd565b925060208a01995050600181019050611d35565b50829750879550505050505092915050565b60006020820190508181036000830152611d998184611d0a565b905092915050565b600067ffffffffffffffff821115611dbc57611dbb6117b0565b5b602082029050602081019050919050565b600080fd5b6000611de5611de084611da1565b611810565b90508083825260208201905060208402830185811115611e0857611e07611dcd565b5b835b81811015611e4f57803567ffffffffffffffff811115611e2d57611e2c611795565b5b808601611e3a89826118ad565b85526020850194505050602081019050611e0a565b5050509392505050565b600082601f830112611e6e57611e6d611795565b5b8135611e7e848260208601611dd2565b91505092915050565b600060208284031215611e9d57611e9c61178b565b5b600082013567ffffffffffffffff811115611ebb57611eba611790565b5b611ec784828501611e59565b91505092915050565b600060c0830160008301518482036000860152611eed8282611c0a565b91505060208301518482036020860152611f078282611c0a565b9150506040830151611f1c6040860182611c43565b506060830151611f2f6060860182611c43565b506080830151611f426080860182611c43565b5060a083015184820360a0860152611f5a8282611c0a565b9150508091505092915050565b60006020820190508181036000830152611f818184611ed0565b905092915050565b600060208284031215611f9f57611f9e61178b565b5b6000611fad84828501611985565b91505092915050565b600082825260208201905092915050565b6000611fd282611bbb565b611fdc8185611fb6565b9350611fec818560208601611bd7565b611ff58161179f565b840191505092915050565b61200981611964565b82525050565b600060c08201905081810360008301526120298189611fc7565b9050818103602083015261203d8188611fc7565b905061204c6040830187612000565b6120596060830186612000565b6120666080830185612000565b81810360a08301526120788184611fc7565b9050979650505050505050565b6000602082019050818103600083015261209f8184611fc7565b905092915050565b600081905092915050565b60006120bd82611bbb565b6120c781856120a7565b93506120d7818560208601611bd7565b80840191505092915050565b60006120ef82846120b2565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061217057607f821691505b6020821081141561218457612183612129565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006121c482611964565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156121f7576121f661218a565b5b600182019050919050565b60008190508160005260206000209050919050565b6000815461222481612158565b61222e81866120a7565b94506001821660008114612249576001811461225a5761228d565b60ff1983168652818601935061228d565b61226385612202565b60005b8381101561228557815481890152600182019150602081019050612266565b838801955050505b50505092915050565b60006122a28284612217565b915081905092915050565b60006122b882611964565b91506122c383611964565b9250828210156122d6576122d561218a565b5b828203905092915050565b60006122ec82611964565b91506122f783611964565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561232c5761232b61218a565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212205119f796e76f5b296853ec704e413f740306ceadca3a3614a77d8ce51795b54964736f6c634300080a0033";

    public static final String FUNC_BATCHDELETE = "batchDelete";

    public static final String FUNC_COMPETITIONINSERTED = "competitionInserted";

    public static final String FUNC_COMPETITIONKEY = "competitionKey";

    public static final String FUNC_COMPETITIONS = "competitions";

    public static final String FUNC_DELETECOMPETITION = "deleteCompetition";

    public static final String FUNC_GETALL = "getAll";

    public static final String FUNC_GETENTITY = "getEntity";

    public static final String FUNC_GETLISTPAGE = "getListPage";

    public static final String FUNC_ISEQUAL = "isEqual";

    public static final String FUNC_REMOVECOMPETITIONKEYATINDEX = "removeCompetitionKeyAtIndex";

    public static final String FUNC_SAVE = "save";

    public static final Event DELETEMSG_EVENT = new Event("DeleteMsg",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    @Deprecated
    protected CompetitionContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CompetitionContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected CompetitionContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected CompetitionContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<DeleteMsgEventResponse> getDeleteMsgEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DELETEMSG_EVENT, transactionReceipt);
        ArrayList<DeleteMsgEventResponse> responses = new ArrayList<DeleteMsgEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DeleteMsgEventResponse typedResponse = new DeleteMsgEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.code = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DeleteMsgEventResponse> deleteMsgEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DeleteMsgEventResponse>() {
            @Override
            public DeleteMsgEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DELETEMSG_EVENT, log);
                DeleteMsgEventResponse typedResponse = new DeleteMsgEventResponse();
                typedResponse.log = log;
                typedResponse.code = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DeleteMsgEventResponse> deleteMsgEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DELETEMSG_EVENT));
        return deleteMsgEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> batchDelete(List<String> idList) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BATCHDELETE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                        org.web3j.abi.datatypes.Utf8String.class,
                        org.web3j.abi.Utils.typeMap(idList, org.web3j.abi.datatypes.Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> competitionInserted(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_COMPETITIONINSERTED,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> competitionKey(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_COMPETITIONKEY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple6<String, String, BigInteger, BigInteger, BigInteger, String>> competitions(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_COMPETITIONS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple6<String, String, BigInteger, BigInteger, BigInteger, String>>(function,
                new Callable<Tuple6<String, String, BigInteger, BigInteger, BigInteger, String>>() {
                    @Override
                    public Tuple6<String, String, BigInteger, BigInteger, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, String, BigInteger, BigInteger, BigInteger, String>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (String) results.get(5).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> deleteCompetition(Competition _competition) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DELETECOMPETITION,
                Arrays.<Type>asList(_competition),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> getAll() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETALL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Competition>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Competition> getEntity(Competition _competition) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETENTITY,
                Arrays.<Type>asList(_competition),
                Arrays.<TypeReference<?>>asList(new TypeReference<Competition>() {}));
        return executeRemoteCallSingleValueReturn(function, Competition.class);
    }

    public RemoteFunctionCall<List> getListPage(BigInteger begin, BigInteger end) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETLISTPAGE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(begin),
                        new org.web3j.abi.datatypes.generated.Uint256(end)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Competition>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Boolean> isEqual(String a, String b) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISEQUAL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(a),
                        new org.web3j.abi.datatypes.Utf8String(b)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> removeCompetitionKeyAtIndex(BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REMOVECOMPETITIONKEYATINDEX,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> save(Competition _competition) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAVE,
                Arrays.<Type>asList(_competition),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static CompetitionContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CompetitionContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static CompetitionContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CompetitionContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static CompetitionContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new CompetitionContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static CompetitionContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CompetitionContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CompetitionContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(CompetitionContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<CompetitionContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(CompetitionContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<CompetitionContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(CompetitionContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<CompetitionContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(CompetitionContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class Competition extends DynamicStruct {
        public String id;

        public String competitionName;

        public BigInteger competitionLevel;

        public BigInteger awardLevel;

        public BigInteger acquireTime;

        public String proofPic;

        public Competition(String id, String competitionName, BigInteger competitionLevel, BigInteger awardLevel, BigInteger acquireTime, String proofPic) {
            super(new org.web3j.abi.datatypes.Utf8String(id),new org.web3j.abi.datatypes.Utf8String(competitionName),new org.web3j.abi.datatypes.generated.Uint256(competitionLevel),new org.web3j.abi.datatypes.generated.Uint256(awardLevel),new org.web3j.abi.datatypes.generated.Uint256(acquireTime),new org.web3j.abi.datatypes.Utf8String(proofPic));
            this.id = id;
            this.competitionName = competitionName;
            this.competitionLevel = competitionLevel;
            this.awardLevel = awardLevel;
            this.acquireTime = acquireTime;
            this.proofPic = proofPic;
        }

        public Competition(Utf8String id, Utf8String competitionName, Uint256 competitionLevel, Uint256 awardLevel, Uint256 acquireTime, Utf8String proofPic) {
            super(id,competitionName,competitionLevel,awardLevel,acquireTime,proofPic);
            this.id = id.getValue();
            this.competitionName = competitionName.getValue();
            this.competitionLevel = competitionLevel.getValue();
            this.awardLevel = awardLevel.getValue();
            this.acquireTime = acquireTime.getValue();
            this.proofPic = proofPic.getValue();
        }
    }

    public static class DeleteMsgEventResponse extends BaseEventResponse {
        public Boolean code;
    }
}