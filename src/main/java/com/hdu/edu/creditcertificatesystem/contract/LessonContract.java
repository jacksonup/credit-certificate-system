package com.hdu.edu.creditcertificatesystem.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple11;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class LessonContract extends Contract {
    public static final String BINARY = "608060405260028054905060035534801561001957600080fd5b50613596806100296000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80636e49df43116100715780636e49df43146101a15780638e887852146101d157806397ddd7d7146101ed5780639b6a14071461021f578063d282424014610250578063ea27f40f1461028a576100b4565b8063485c7947146100b95780634d7dd4fe146100ea57806352c0faa61461011a57806353ed51431461014a57806359583c2a146101695780636e1f5b8314610185575b600080fd5b6100d360048036038101906100ce91906125be565b6102ba565b6040516100e1929190612992565b60405180910390f35b61010460048036038101906100ff91906129c9565b61093e565b6040516101119190612a40565b60405180910390f35b610134600480360381019061012f91906129c9565b6109ea565b6040516101419190612a40565b60405180910390f35b610152610a96565b604051610160929190612992565b60405180910390f35b610183600480360381019061017e9190612c7d565b610f3e565b005b61019f600480360381019061019a9190612edc565b6112cd565b005b6101bb60048036038101906101b69190612f54565b6116e0565b6040516101c89190612fac565b60405180910390f35b6101eb60048036038101906101e69190612fc7565b611716565b005b61020760048036038101906102029190612f54565b611a17565b60405161021693929190613010565b60405180910390f35b61023960048036038101906102349190612edc565b611af9565b60405161024792919061319b565b60405180910390f35b61026a60048036038101906102659190612f54565b611eb6565b6040516102819b9a999897969594939291906131e1565b60405180910390f35b6102a4600480360381019061029f9190612f54565b6120be565b6040516102b19190612fac565b60405180910390f35b606080600060028054905067ffffffffffffffff8111156102de576102dd612a67565b5b60405190808252806020026020018201604052801561031757816020015b610304612385565b8152602001906001900390816102fc5790505b509050600060068054905067ffffffffffffffff81111561033b5761033a612a67565b5b60405190808252806020026020018201604052801561037457816020015b6103616123df565b8152602001906001900390816103595790505b5090506000805b6002805490508110156106125760006002828154811061039e5761039d6132a1565b5b906000526020600020016040516103b591906133d0565b9081526020016040518091039020604051806101600160405290816000820180546103df906132ff565b80601f016020809104026020016040519081016040528092919081815260200182805461040b906132ff565b80156104585780601f1061042d57610100808354040283529160200191610458565b820191906000526020600020905b81548152906001019060200180831161043b57829003601f168201915b50505050508152602001600182018054610471906132ff565b80601f016020809104026020016040519081016040528092919081815260200182805461049d906132ff565b80156104ea5780601f106104bf576101008083540402835291602001916104ea565b820191906000526020600020905b8154815290600101906020018083116104cd57829003601f168201915b50505050508152602001600282018054610503906132ff565b80601f016020809104026020016040519081016040528092919081815260200182805461052f906132ff565b801561057c5780601f106105515761010080835404028352916020019161057c565b820191906000526020600020905b81548152906001019060200180831161055f57829003601f168201915b5050505050815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a820154815250508483806105e190613416565b9450815181106105f4576105f36132a1565b5b6020026020010181905250808061060a90613416565b91505061037b565b506000805b60068054905081101561076f5760046006828154811061063a576106396132a1565b5b9060005260206000200160405161065191906133d0565b908152602001604051809103902060405180606001604052908160008201805461067a906132ff565b80601f01602080910402602001604051908101604052809291908181526020018280546106a6906132ff565b80156106f35780601f106106c8576101008083540402835291602001916106f3565b820191906000526020600020905b8154815290600101906020018083116106d657829003601f168201915b505050505081526020016001820160009054906101000a900460ff161515151581526020016001820160019054906101000a900460ff16151515158152505084838061073e90613416565b945081518110610751576107506132a1565b5b6020026020010181905250808061076790613416565b915050610617565b50878710156107815750505050610937565b60018261078e919061345f565b8711156107a5576001826107a2919061345f565b96505b600188886107b3919061345f565b6107bd9190613493565b67ffffffffffffffff8111156107d6576107d5612a67565b5b60405190808252806020026020018201604052801561080f57816020015b6107fc612385565b8152602001906001900390816107f45790505b50955060018888610820919061345f565b61082a9190613493565b67ffffffffffffffff81111561084357610842612a67565b5b60405190808252806020026020018201604052801561087c57816020015b6108696123df565b8152602001906001900390816108615790505b509450600091506000905060008890505b878111610931578481815181106108a7576108a66132a1565b5b60200260200101518784806108bb90613416565b9550815181106108ce576108cd6132a1565b5b60200260200101819052508381815181106108ec576108eb6132a1565b5b602002602001015186838061090090613416565b945081518110610913576109126132a1565b5b6020026020010181905250808061092990613416565b91505061088d565b50505050505b9250929050565b6002818154811061094e57600080fd5b906000526020600020016000915090508054610969906132ff565b80601f0160208091040260200160405190810160405280929190818152602001828054610995906132ff565b80156109e25780601f106109b7576101008083540402835291602001916109e2565b820191906000526020600020905b8154815290600101906020018083116109c557829003601f168201915b505050505081565b600681815481106109fa57600080fd5b906000526020600020016000915090508054610a15906132ff565b80601f0160208091040260200160405190810160405280929190818152602001828054610a41906132ff565b8015610a8e5780601f10610a6357610100808354040283529160200191610a8e565b820191906000526020600020905b815481529060010190602001808311610a7157829003601f168201915b505050505081565b606080600060028054905067ffffffffffffffff811115610aba57610ab9612a67565b5b604051908082528060200260200182016040528015610af357816020015b610ae0612385565b815260200190600190039081610ad85790505b509050600060068054905067ffffffffffffffff811115610b1757610b16612a67565b5b604051908082528060200260200182016040528015610b5057816020015b610b3d6123df565b815260200190600190039081610b355790505b50905060005b600280549050811015610de157600060028281548110610b7957610b786132a1565b5b90600052602060002001604051610b9091906133d0565b908152602001604051809103902060405180610160016040529081600082018054610bba906132ff565b80601f0160208091040260200160405190810160405280929190818152602001828054610be6906132ff565b8015610c335780601f10610c0857610100808354040283529160200191610c33565b820191906000526020600020905b815481529060010190602001808311610c1657829003601f168201915b50505050508152602001600182018054610c4c906132ff565b80601f0160208091040260200160405190810160405280929190818152602001828054610c78906132ff565b8015610cc55780601f10610c9a57610100808354040283529160200191610cc5565b820191906000526020600020905b815481529060010190602001808311610ca857829003601f168201915b50505050508152602001600282018054610cde906132ff565b80601f0160208091040260200160405190810160405280929190818152602001828054610d0a906132ff565b8015610d575780601f10610d2c57610100808354040283529160200191610d57565b820191906000526020600020905b815481529060010190602001808311610d3a57829003601f168201915b5050505050815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a82015481525050838281518110610dc357610dc26132a1565b5b60200260200101819052508080610dd990613416565b915050610b56565b5060005b600680549050811015610f3157600460068281548110610e0857610e076132a1565b5b90600052602060002001604051610e1f91906133d0565b9081526020016040518091039020604051806060016040529081600082018054610e48906132ff565b80601f0160208091040260200160405190810160405280929190818152602001828054610e74906132ff565b8015610ec15780601f10610e9657610100808354040283529160200191610ec1565b820191906000526020600020905b815481529060010190602001808311610ea457829003601f168201915b505050505081526020016001820160009054906101000a900460ff161515151581526020016001820160019054906101000a900460ff161515151581525050828281518110610f1357610f126132a1565b5b60200260200101819052508080610f2990613416565b915050610de5565b5081819350935050509091565b60005b81518110156112c9576001828281518110610f5f57610f5e6132a1565b5b6020026020010151604051610f74919061351a565b908152602001604051809103902060009054906101000a900460ff161561127d5760008060006001858581518110610faf57610fae6132a1565b5b6020026020010151604051610fc4919061351a565b908152602001604051809103902060006101000a81548160ff0219169083151502179055506000600585858151811061100057610fff6132a1565b5b6020026020010151604051611015919061351a565b908152602001604051809103902060006101000a81548160ff021916908315150217905550600091505b60028054905082101561113357611116848481518110611062576110616132a1565b5b60200260200101516002848154811061107e5761107d6132a1565b5b906000526020600020018054611093906132ff565b80601f01602080910402602001604051908101604052809291908181526020018280546110bf906132ff565b801561110c5780601f106110e15761010080835404028352916020019161110c565b820191906000526020600020905b8154815290600101906020018083116110ef57829003601f168201915b50505050506120f4565b1561112057611133565b818061112b90613416565b92505061103f565b600090505b60068054905081101561122c5761120f84848151811061115b5761115a6132a1565b5b602002602001015160068381548110611177576111766132a1565b5b90600052602060002001805461118c906132ff565b80601f01602080910402602001604051908101604052809291908181526020018280546111b8906132ff565b80156112055780601f106111da57610100808354040283529160200191611205565b820191906000526020600020905b8154815290600101906020018083116111e857829003601f168201915b50505050506120f4565b156112195761122c565b808061122490613416565b915050611138565b611235826121d1565b61123e816122ab565b7fcdb72d06565be2e6e4048e127d72c0d6cd72635cbae3d499c02100a7cd5c0a89600160405161126e9190612fac565b60405180910390a150506112b6565b7fcdb72d06565be2e6e4048e127d72c0d6cd72635cbae3d499c02100a7cd5c0a8960006040516112ad9190612fac565b60405180910390a15b80806112c190613416565b915050610f41565b5050565b600182600001516040516112e1919061351a565b908152602001604051809103902060009054906101000a900460ff16611450578160008360000151604051611316919061351a565b90815260200160405180910390206000820151816000019080519060200190611340929190612404565b50602082015181600101908051906020019061135d929190612404565b50604082015181600201908051906020019061137a929190612404565b50606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080155610120820151816009015561014082015181600a015590505060018083600001516040516113e6919061351a565b908152602001604051809103902060006101000a81548160ff0219169083151502179055506002826000015190806001815401808255809150506001900390600052602060002001600090919091909150908051906020019061144a929190612404565b50611521565b8160008360000151604051611465919061351a565b9081526020016040518091039020600082015181600001908051906020019061148f929190612404565b5060208201518160010190805190602001906114ac929190612404565b5060408201518160020190805190602001906114c9929190612404565b50606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080155610120820151816009015561014082015181600a01559050505b60058160000151604051611535919061351a565b908152602001604051809103902060009054906101000a900460ff1661165857806004826000015160405161156a919061351a565b90815260200160405180910390206000820151816000019080519060200190611594929190612404565b5060208201518160010160006101000a81548160ff02191690831515021790555060408201518160010160016101000a81548160ff0219169083151502179055509050506001600582600001516040516115ee919061351a565b908152602001604051809103902060006101000a81548160ff02191690831515021790555060068160000151908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190611652929190612404565b506116dc565b806004826000015160405161166d919061351a565b90815260200160405180910390206000820151816000019080519060200190611697929190612404565b5060208201518160010160006101000a81548160ff02191690831515021790555060408201518160010160016101000a81548160ff0219169083151502179055509050505b5050565b6005818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460ff1681565b6001816000015160405161172a919061351a565b908152602001604051809103902060009054906101000a900460ff16156119db57600080600060018460000151604051611764919061351a565b908152602001604051809103902060006101000a81548160ff02191690831515021790555060006005846000015160405161179f919061351a565b908152602001604051809103902060006101000a81548160ff021916908315150217905550600091505b6002805490508210156118a75761188a8360000151600284815481106117f2576117f16132a1565b5b906000526020600020018054611807906132ff565b80601f0160208091040260200160405190810160405280929190818152602001828054611833906132ff565b80156118805780601f1061185557610100808354040283529160200191611880565b820191906000526020600020905b81548152906001019060200180831161186357829003601f168201915b50505050506120f4565b15611894576118a7565b818061189f90613416565b9250506117c9565b600090505b60068054905081101561198a5761196d8360000151600683815481106118d5576118d46132a1565b5b9060005260206000200180546118ea906132ff565b80601f0160208091040260200160405190810160405280929190818152602001828054611916906132ff565b80156119635780601f1061193857610100808354040283529160200191611963565b820191906000526020600020905b81548152906001019060200180831161194657829003601f168201915b50505050506120f4565b156119775761198a565b808061198290613416565b9150506118ac565b611993826121d1565b61199c816122ab565b7fcdb72d06565be2e6e4048e127d72c0d6cd72635cbae3d499c02100a7cd5c0a8960016040516119cc9190612fac565b60405180910390a15050611a14565b7fcdb72d06565be2e6e4048e127d72c0d6cd72635cbae3d499c02100a7cd5c0a896000604051611a0b9190612fac565b60405180910390a15b50565b600481805160208101820180518482526020830160208501208183528095505050505050600091509050806000018054611a50906132ff565b80601f0160208091040260200160405190810160405280929190818152602001828054611a7c906132ff565b8015611ac95780601f10611a9e57610100808354040283529160200191611ac9565b820191906000526020600020905b815481529060010190602001808311611aac57829003601f168201915b5050505050908060010160009054906101000a900460ff16908060010160019054906101000a900460ff16905083565b611b01612385565b611b096123df565b60018460000151604051611b1d919061351a565b908152602001604051809103902060009054906101000a900460ff168015611b71575060058360000151604051611b54919061351a565b908152602001604051809103902060009054906101000a900460ff165b15611eae5760008460000151604051611b8a919061351a565b908152602001604051809103902060048460000151604051611bac919061351a565b90815260200160405180910390208160405180610160016040529081600082018054611bd7906132ff565b80601f0160208091040260200160405190810160405280929190818152602001828054611c03906132ff565b8015611c505780601f10611c2557610100808354040283529160200191611c50565b820191906000526020600020905b815481529060010190602001808311611c3357829003601f168201915b50505050508152602001600182018054611c69906132ff565b80601f0160208091040260200160405190810160405280929190818152602001828054611c95906132ff565b8015611ce25780601f10611cb757610100808354040283529160200191611ce2565b820191906000526020600020905b815481529060010190602001808311611cc557829003601f168201915b50505050508152602001600282018054611cfb906132ff565b80601f0160208091040260200160405190810160405280929190818152602001828054611d27906132ff565b8015611d745780601f10611d4957610100808354040283529160200191611d74565b820191906000526020600020905b815481529060010190602001808311611d5757829003601f168201915b5050505050815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a82015481525050915080604051806060016040529081600082018054611deb906132ff565b80601f0160208091040260200160405190810160405280929190818152602001828054611e17906132ff565b8015611e645780601f10611e3957610100808354040283529160200191611e64565b820191906000526020600020905b815481529060010190602001808311611e4757829003601f168201915b505050505081526020016001820160009054906101000a900460ff161515151581526020016001820160019054906101000a900460ff161515151581525050905091509150611eaf565b5b9250929050565b600081805160208101820180518482526020830160208501208183528095505050505050600091509050806000018054611eef906132ff565b80601f0160208091040260200160405190810160405280929190818152602001828054611f1b906132ff565b8015611f685780601f10611f3d57610100808354040283529160200191611f68565b820191906000526020600020905b815481529060010190602001808311611f4b57829003601f168201915b505050505090806001018054611f7d906132ff565b80601f0160208091040260200160405190810160405280929190818152602001828054611fa9906132ff565b8015611ff65780601f10611fcb57610100808354040283529160200191611ff6565b820191906000526020600020905b815481529060010190602001808311611fd957829003601f168201915b50505050509080600201805461200b906132ff565b80601f0160208091040260200160405190810160405280929190818152602001828054612037906132ff565b80156120845780601f1061205957610100808354040283529160200191612084565b820191906000526020600020905b81548152906001019060200180831161206757829003601f168201915b50505050509080600301549080600401549080600501549080600601549080600701549080600801549080600901549080600a015490508b565b6001818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460ff1681565b60008083905060008390508051825114612113576000925050506121cb565b60005b82518110156121c357818181518110612132576121316132a1565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916838281518110612172576121716132a1565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146121b057600093505050506121cb565b80806121bb90613416565b915050612116565b506001925050505b92915050565b600060028054905090508082106121e857506122a8565b60008290505b6001826121fb919061345f565b8110156122755760026001826122119190613493565b81548110612222576122216132a1565b5b90600052602060002001600282815481106122405761223f6132a1565b5b90600052602060002001908054612256906132ff565b61226192919061248a565b50808061226d90613416565b9150506121ee565b50600280548061228857612287613531565b5b6001900381819060005260206000200160006122a49190612517565b9055505b50565b600060068054905090508082106122c25750612382565b60008290505b6001826122d5919061345f565b81101561234f5760066001826122eb9190613493565b815481106122fc576122fb6132a1565b5b906000526020600020016006828154811061231a576123196132a1565b5b90600052602060002001908054612330906132ff565b61233b92919061248a565b50808061234790613416565b9150506122c8565b50600680548061236257612361613531565b5b60019003818190600052602060002001600061237e9190612517565b9055505b50565b60405180610160016040528060608152602001606081526020016060815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060600160405280606081526020016000151581526020016000151581525090565b828054612410906132ff565b90600052602060002090601f0160209004810192826124325760008555612479565b82601f1061244b57805160ff1916838001178555612479565b82800160010185558215612479579182015b8281111561247857825182559160200191906001019061245d565b5b5090506124869190612557565b5090565b828054612496906132ff565b90600052602060002090601f0160209004810192826124b85760008555612506565b82601f106124c95780548555612506565b8280016001018555821561250657600052602060002091601f016020900482015b828111156125055782548255916001019190600101906124ea565b5b5090506125139190612557565b5090565b508054612523906132ff565b6000825580601f106125355750612554565b601f0160209004906000526020600020908101906125539190612557565b5b50565b5b80821115612570576000816000905550600101612558565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61259b81612588565b81146125a657600080fd5b50565b6000813590506125b881612592565b92915050565b600080604083850312156125d5576125d461257e565b5b60006125e3858286016125a9565b92505060206125f4858286016125a9565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612664578082015181840152602081019050612649565b83811115612673576000848401525b50505050565b6000601f19601f8301169050919050565b60006126958261262a565b61269f8185612635565b93506126af818560208601612646565b6126b881612679565b840191505092915050565b6126cc81612588565b82525050565b60006101608301600083015184820360008601526126f0828261268a565b9150506020830151848203602086015261270a828261268a565b91505060408301518482036040860152612724828261268a565b915050606083015161273960608601826126c3565b50608083015161274c60808601826126c3565b5060a083015161275f60a08601826126c3565b5060c083015161277260c08601826126c3565b5060e083015161278560e08601826126c3565b5061010083015161279a6101008601826126c3565b506101208301516127af6101208601826126c3565b506101408301516127c46101408601826126c3565b508091505092915050565b60006127db83836126d2565b905092915050565b6000602082019050919050565b60006127fb826125fe565b6128058185612609565b9350836020820285016128178561261a565b8060005b85811015612853578484038952815161283485826127cf565b945061283f836127e3565b925060208a0199505060018101905061281b565b50829750879550505050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60008115159050919050565b6128a681612891565b82525050565b600060608301600083015184820360008601526128c9828261268a565b91505060208301516128de602086018261289d565b5060408301516128f1604086018261289d565b508091505092915050565b600061290883836128ac565b905092915050565b6000602082019050919050565b600061292882612865565b6129328185612870565b93508360208202850161294485612881565b8060005b85811015612980578484038952815161296185826128fc565b945061296c83612910565b925060208a01995050600181019050612948565b50829750879550505050505092915050565b600060408201905081810360008301526129ac81856127f0565b905081810360208301526129c0818461291d565b90509392505050565b6000602082840312156129df576129de61257e565b5b60006129ed848285016125a9565b91505092915050565b600082825260208201905092915050565b6000612a128261262a565b612a1c81856129f6565b9350612a2c818560208601612646565b612a3581612679565b840191505092915050565b60006020820190508181036000830152612a5a8184612a07565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612a9f82612679565b810181811067ffffffffffffffff82111715612abe57612abd612a67565b5b80604052505050565b6000612ad1612574565b9050612add8282612a96565b919050565b600067ffffffffffffffff821115612afd57612afc612a67565b5b602082029050602081019050919050565b600080fd5b600080fd5b600067ffffffffffffffff821115612b3357612b32612a67565b5b612b3c82612679565b9050602081019050919050565b82818337600083830152505050565b6000612b6b612b6684612b18565b612ac7565b905082815260208101848484011115612b8757612b86612b13565b5b612b92848285612b49565b509392505050565b600082601f830112612baf57612bae612a62565b5b8135612bbf848260208601612b58565b91505092915050565b6000612bdb612bd684612ae2565b612ac7565b90508083825260208201905060208402830185811115612bfe57612bfd612b0e565b5b835b81811015612c4557803567ffffffffffffffff811115612c2357612c22612a62565b5b808601612c308982612b9a565b85526020850194505050602081019050612c00565b5050509392505050565b600082601f830112612c6457612c63612a62565b5b8135612c74848260208601612bc8565b91505092915050565b600060208284031215612c9357612c9261257e565b5b600082013567ffffffffffffffff811115612cb157612cb0612583565b5b612cbd84828501612c4f565b91505092915050565b600080fd5b600080fd5b60006101608284031215612ce757612ce6612cc6565b5b612cf2610160612ac7565b9050600082013567ffffffffffffffff811115612d1257612d11612ccb565b5b612d1e84828501612b9a565b600083015250602082013567ffffffffffffffff811115612d4257612d41612ccb565b5b612d4e84828501612b9a565b602083015250604082013567ffffffffffffffff811115612d7257612d71612ccb565b5b612d7e84828501612b9a565b6040830152506060612d92848285016125a9565b6060830152506080612da6848285016125a9565b60808301525060a0612dba848285016125a9565b60a08301525060c0612dce848285016125a9565b60c08301525060e0612de2848285016125a9565b60e083015250610100612df7848285016125a9565b61010083015250610120612e0d848285016125a9565b61012083015250610140612e23848285016125a9565b6101408301525092915050565b612e3981612891565b8114612e4457600080fd5b50565b600081359050612e5681612e30565b92915050565b600060608284031215612e7257612e71612cc6565b5b612e7c6060612ac7565b9050600082013567ffffffffffffffff811115612e9c57612e9b612ccb565b5b612ea884828501612b9a565b6000830152506020612ebc84828501612e47565b6020830152506040612ed084828501612e47565b60408301525092915050565b60008060408385031215612ef357612ef261257e565b5b600083013567ffffffffffffffff811115612f1157612f10612583565b5b612f1d85828601612cd0565b925050602083013567ffffffffffffffff811115612f3e57612f3d612583565b5b612f4a85828601612e5c565b9150509250929050565b600060208284031215612f6a57612f6961257e565b5b600082013567ffffffffffffffff811115612f8857612f87612583565b5b612f9484828501612b9a565b91505092915050565b612fa681612891565b82525050565b6000602082019050612fc16000830184612f9d565b92915050565b600060208284031215612fdd57612fdc61257e565b5b600082013567ffffffffffffffff811115612ffb57612ffa612583565b5b61300784828501612cd0565b91505092915050565b6000606082019050818103600083015261302a8186612a07565b90506130396020830185612f9d565b6130466040830184612f9d565b949350505050565b600061016083016000830151848203600086015261306c828261268a565b91505060208301518482036020860152613086828261268a565b915050604083015184820360408601526130a0828261268a565b91505060608301516130b560608601826126c3565b5060808301516130c860808601826126c3565b5060a08301516130db60a08601826126c3565b5060c08301516130ee60c08601826126c3565b5060e083015161310160e08601826126c3565b506101008301516131166101008601826126c3565b5061012083015161312b6101208601826126c3565b506101408301516131406101408601826126c3565b508091505092915050565b60006060830160008301518482036000860152613168828261268a565b915050602083015161317d602086018261289d565b506040830151613190604086018261289d565b508091505092915050565b600060408201905081810360008301526131b5818561304e565b905081810360208301526131c9818461314b565b90509392505050565b6131db81612588565b82525050565b60006101608201905081810360008301526131fc818e612a07565b90508181036020830152613210818d612a07565b90508181036040830152613224818c612a07565b9050613233606083018b6131d2565b613240608083018a6131d2565b61324d60a08301896131d2565b61325a60c08301886131d2565b61326760e08301876131d2565b6132756101008301866131d2565b6132836101208301856131d2565b6132916101408301846131d2565b9c9b505050505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061331757607f821691505b6020821081141561332b5761332a6132d0565b5b50919050565b600081905092915050565b60008190508160005260206000209050919050565b6000815461335e816132ff565b6133688186613331565b945060018216600081146133835760018114613394576133c7565b60ff198316865281860193506133c7565b61339d8561333c565b60005b838110156133bf578154818901526001820191506020810190506133a0565b838801955050505b50505092915050565b60006133dc8284613351565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061342182612588565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613454576134536133e7565b5b600182019050919050565b600061346a82612588565b915061347583612588565b925082821015613488576134876133e7565b5b828203905092915050565b600061349e82612588565b91506134a983612588565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156134de576134dd6133e7565b5b828201905092915050565b60006134f48261262a565b6134fe8185613331565b935061350e818560208601612646565b80840191505092915050565b600061352682846134e9565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212200a9109ed6b723b0e619355faff22293dc303f33eeacdd114b10ae986c50c415a64736f6c634300080a0033";

    public static final String FUNC_BATCHDELETE = "batchDelete";

    public static final String FUNC_DELETESTUDENT = "deleteStudent";

    public static final String FUNC_EXTRAINFOINSERTED = "extraInfoInserted";

    public static final String FUNC_EXTRAINFOKEY = "extraInfoKey";

    public static final String FUNC_EXTRAINFOS = "extraInfos";

    public static final String FUNC_GETALL = "getAll";

    public static final String FUNC_GETENTITY = "getEntity";

    public static final String FUNC_GETLISTPAGE = "getListPage";

    public static final String FUNC_LESSONINSERTED = "lessonInserted";

    public static final String FUNC_LESSONKEY = "lessonKey";

    public static final String FUNC_LESSONS = "lessons";

    public static final String FUNC_SAVE = "save";

    public static final Event DELETEMSG_EVENT = new Event("DeleteMsg",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    @Deprecated
    protected LessonContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected LessonContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected LessonContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected LessonContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<DeleteMsgEventResponse> getDeleteMsgEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DELETEMSG_EVENT, transactionReceipt);
        ArrayList<DeleteMsgEventResponse> responses = new ArrayList<DeleteMsgEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DeleteMsgEventResponse typedResponse = new DeleteMsgEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.code = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DeleteMsgEventResponse> deleteMsgEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DeleteMsgEventResponse>() {
            @Override
            public DeleteMsgEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DELETEMSG_EVENT, log);
                DeleteMsgEventResponse typedResponse = new DeleteMsgEventResponse();
                typedResponse.log = log;
                typedResponse.code = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DeleteMsgEventResponse> deleteMsgEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DELETEMSG_EVENT));
        return deleteMsgEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> batchDelete(List<String> lessonIdList) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BATCHDELETE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                        org.web3j.abi.datatypes.Utf8String.class,
                        org.web3j.abi.Utils.typeMap(lessonIdList, org.web3j.abi.datatypes.Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deleteStudent(Lesson _lesson) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DELETESTUDENT,
                Arrays.<Type>asList(_lesson),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> extraInfoInserted(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_EXTRAINFOINSERTED,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> extraInfoKey(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_EXTRAINFOKEY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple3<String, Boolean, Boolean>> extraInfos(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_EXTRAINFOS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple3<String, Boolean, Boolean>>(function,
                new Callable<Tuple3<String, Boolean, Boolean>>() {
                    @Override
                    public Tuple3<String, Boolean, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, Boolean, Boolean>(
                                (String) results.get(0).getValue(),
                                (Boolean) results.get(1).getValue(),
                                (Boolean) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<List<Lesson>, List<ExtraInfo>>> getAll() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETALL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Lesson>>() {}, new TypeReference<DynamicArray<ExtraInfo>>() {}));
        return new RemoteFunctionCall<Tuple2<List<Lesson>, List<ExtraInfo>>>(function,
                new Callable<Tuple2<List<Lesson>, List<ExtraInfo>>>() {
                    @Override
                    public Tuple2<List<Lesson>, List<ExtraInfo>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<Lesson>, List<ExtraInfo>>(
                                convertToNative((List<Lesson>) results.get(0).getValue()),
                                convertToNative((List<ExtraInfo>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<Lesson, ExtraInfo>> getEntity(Lesson _lesson, ExtraInfo _extraInfo) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETENTITY,
                Arrays.<Type>asList(_lesson,
                        _extraInfo),
                Arrays.<TypeReference<?>>asList(new TypeReference<Lesson>() {}, new TypeReference<ExtraInfo>() {}));
        return new RemoteFunctionCall<Tuple2<Lesson, ExtraInfo>>(function,
                new Callable<Tuple2<Lesson, ExtraInfo>>() {
                    @Override
                    public Tuple2<Lesson, ExtraInfo> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<Lesson, ExtraInfo>(
                                (Lesson) results.get(0),
                                (ExtraInfo) results.get(1));
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<List<Lesson>, List<ExtraInfo>>> getListPage(BigInteger begin, BigInteger end) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETLISTPAGE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(begin),
                        new org.web3j.abi.datatypes.generated.Uint256(end)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Lesson>>() {}, new TypeReference<DynamicArray<ExtraInfo>>() {}));
        return new RemoteFunctionCall<Tuple2<List<Lesson>, List<ExtraInfo>>>(function,
                new Callable<Tuple2<List<Lesson>, List<ExtraInfo>>>() {
                    @Override
                    public Tuple2<List<Lesson>, List<ExtraInfo>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<Lesson>, List<ExtraInfo>>(
                                convertToNative((List<Lesson>) results.get(0).getValue()),
                                convertToNative((List<ExtraInfo>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<Boolean> lessonInserted(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LESSONINSERTED,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> lessonKey(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LESSONKEY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple11<String, String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> lessons(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LESSONS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple11<String, String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple11<String, String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple11<String, String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple11<String, String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue(),
                                (BigInteger) results.get(6).getValue(),
                                (BigInteger) results.get(7).getValue(),
                                (BigInteger) results.get(8).getValue(),
                                (BigInteger) results.get(9).getValue(),
                                (BigInteger) results.get(10).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> save(Lesson _lesson, ExtraInfo _extraInfo) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAVE,
                Arrays.<Type>asList(_lesson,
                        _extraInfo),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static LessonContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new LessonContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static LessonContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new LessonContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static LessonContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new LessonContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static LessonContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new LessonContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<LessonContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(LessonContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<LessonContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(LessonContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<LessonContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(LessonContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<LessonContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(LessonContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class Lesson extends DynamicStruct {
        public String lessonId;

        public String lessonName;

        public String openCollege;

        public BigInteger regularScore;

        public BigInteger midTermScore;

        public BigInteger finalTermScore;

        public BigInteger finalScore;

        public BigInteger credit;

        public BigInteger point;

        public BigInteger creditPoint;

        public BigInteger term;

        public Lesson(String lessonId, String lessonName, String openCollege, BigInteger regularScore, BigInteger midTermScore, BigInteger finalTermScore, BigInteger finalScore, BigInteger credit, BigInteger point, BigInteger creditPoint, BigInteger term) {
            super(new org.web3j.abi.datatypes.Utf8String(lessonId),new org.web3j.abi.datatypes.Utf8String(lessonName),new org.web3j.abi.datatypes.Utf8String(openCollege),new org.web3j.abi.datatypes.generated.Uint256(regularScore),new org.web3j.abi.datatypes.generated.Uint256(midTermScore),new org.web3j.abi.datatypes.generated.Uint256(finalTermScore),new org.web3j.abi.datatypes.generated.Uint256(finalScore),new org.web3j.abi.datatypes.generated.Uint256(credit),new org.web3j.abi.datatypes.generated.Uint256(point),new org.web3j.abi.datatypes.generated.Uint256(creditPoint),new org.web3j.abi.datatypes.generated.Uint256(term));
            this.lessonId = lessonId;
            this.lessonName = lessonName;
            this.openCollege = openCollege;
            this.regularScore = regularScore;
            this.midTermScore = midTermScore;
            this.finalTermScore = finalTermScore;
            this.finalScore = finalScore;
            this.credit = credit;
            this.point = point;
            this.creditPoint = creditPoint;
            this.term = term;
        }

        public Lesson(Utf8String lessonId, Utf8String lessonName, Utf8String openCollege, Uint256 regularScore, Uint256 midTermScore, Uint256 finalTermScore, Uint256 finalScore, Uint256 credit, Uint256 point, Uint256 creditPoint, Uint256 term) {
            super(lessonId,lessonName,openCollege,regularScore,midTermScore,finalTermScore,finalScore,credit,point,creditPoint,term);
            this.lessonId = lessonId.getValue();
            this.lessonName = lessonName.getValue();
            this.openCollege = openCollege.getValue();
            this.regularScore = regularScore.getValue();
            this.midTermScore = midTermScore.getValue();
            this.finalTermScore = finalTermScore.getValue();
            this.finalScore = finalScore.getValue();
            this.credit = credit.getValue();
            this.point = point.getValue();
            this.creditPoint = creditPoint.getValue();
            this.term = term.getValue();
        }
    }

    public static class ExtraInfo extends DynamicStruct {
        public String lessonId;

        public Boolean isRetake;

        public Boolean isReExam;

        public ExtraInfo(String lessonId, Boolean isRetake, Boolean isReExam) {
            super(new org.web3j.abi.datatypes.Utf8String(lessonId),new org.web3j.abi.datatypes.Bool(isRetake),new org.web3j.abi.datatypes.Bool(isReExam));
            this.lessonId = lessonId;
            this.isRetake = isRetake;
            this.isReExam = isReExam;
        }

        public ExtraInfo(Utf8String lessonId, Bool isRetake, Bool isReExam) {
            super(lessonId,isRetake,isReExam);
            this.lessonId = lessonId.getValue();
            this.isRetake = isRetake.getValue();
            this.isReExam = isReExam.getValue();
        }
    }

    public static class DeleteMsgEventResponse extends BaseEventResponse {
        public Boolean code;
    }
}