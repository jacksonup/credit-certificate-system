package com.hdu.edu.creditcertificatesystem.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple12;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class LessonContract extends Contract {
    public static final String BINARY = "";

    public static final String FUNC_BATCHDELETE = "batchDelete";

    public static final String FUNC_DELETESTUDENT = "deleteStudent";

    public static final String FUNC_EXTRAINFOINSERTED = "extraInfoInserted";

    public static final String FUNC_EXTRAINFOKEY = "extraInfoKey";

    public static final String FUNC_EXTRAINFOS = "extraInfos";

    public static final String FUNC_GETALL = "getAll";

    public static final String FUNC_GETENTITY = "getEntity";

    public static final String FUNC_GETLISTBYSTUDENTID = "getListByStudentId";

    public static final String FUNC_GETLISTPAGE = "getListPage";

    public static final String FUNC_LESSONINSERTED = "lessonInserted";

    public static final String FUNC_LESSONKEY = "lessonKey";

    public static final String FUNC_LESSONS = "lessons";

    public static final String FUNC_SAVE = "save";

    public static final Event DELETEMSG_EVENT = new Event("DeleteMsg",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    @Deprecated
    protected LessonContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected LessonContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected LessonContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected LessonContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<DeleteMsgEventResponse> getDeleteMsgEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DELETEMSG_EVENT, transactionReceipt);
        ArrayList<DeleteMsgEventResponse> responses = new ArrayList<DeleteMsgEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DeleteMsgEventResponse typedResponse = new DeleteMsgEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.code = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DeleteMsgEventResponse> deleteMsgEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DeleteMsgEventResponse>() {
            @Override
            public DeleteMsgEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DELETEMSG_EVENT, log);
                DeleteMsgEventResponse typedResponse = new DeleteMsgEventResponse();
                typedResponse.log = log;
                typedResponse.code = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DeleteMsgEventResponse> deleteMsgEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DELETEMSG_EVENT));
        return deleteMsgEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> batchDelete(List<String> lessonIdList) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BATCHDELETE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                        org.web3j.abi.datatypes.Utf8String.class,
                        org.web3j.abi.Utils.typeMap(lessonIdList, org.web3j.abi.datatypes.Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deleteStudent(Lesson _lesson) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DELETESTUDENT,
                Arrays.<Type>asList(_lesson),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> extraInfoInserted(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_EXTRAINFOINSERTED,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> extraInfoKey(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_EXTRAINFOKEY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple3<String, Boolean, Boolean>> extraInfos(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_EXTRAINFOS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple3<String, Boolean, Boolean>>(function,
                new Callable<Tuple3<String, Boolean, Boolean>>() {
                    @Override
                    public Tuple3<String, Boolean, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, Boolean, Boolean>(
                                (String) results.get(0).getValue(),
                                (Boolean) results.get(1).getValue(),
                                (Boolean) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<List<Lesson>, List<ExtraInfo>>> getAll() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETALL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Lesson>>() {}, new TypeReference<DynamicArray<ExtraInfo>>() {}));
        return new RemoteFunctionCall<Tuple2<List<Lesson>, List<ExtraInfo>>>(function,
                new Callable<Tuple2<List<Lesson>, List<ExtraInfo>>>() {
                    @Override
                    public Tuple2<List<Lesson>, List<ExtraInfo>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<Lesson>, List<ExtraInfo>>(
                                convertToNative((List<Lesson>) results.get(0).getValue()),
                                convertToNative((List<ExtraInfo>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<Lesson, ExtraInfo>> getEntity(Lesson _lesson) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETENTITY,
                Arrays.<Type>asList(_lesson),
                Arrays.<TypeReference<?>>asList(new TypeReference<Lesson>() {}, new TypeReference<ExtraInfo>() {}));
        return new RemoteFunctionCall<Tuple2<Lesson, ExtraInfo>>(function,
                new Callable<Tuple2<Lesson, ExtraInfo>>() {
                    @Override
                    public Tuple2<Lesson, ExtraInfo> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<Lesson, ExtraInfo>(
                                (Lesson) results.get(0),
                                (ExtraInfo) results.get(1));
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<List<Lesson>, List<ExtraInfo>>> getListByStudentId(String studentId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETLISTBYSTUDENTID,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(studentId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Lesson>>() {}, new TypeReference<DynamicArray<ExtraInfo>>() {}));
        return new RemoteFunctionCall<Tuple2<List<Lesson>, List<ExtraInfo>>>(function,
                new Callable<Tuple2<List<Lesson>, List<ExtraInfo>>>() {
                    @Override
                    public Tuple2<List<Lesson>, List<ExtraInfo>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<Lesson>, List<ExtraInfo>>(
                                convertToNative((List<Lesson>) results.get(0).getValue()),
                                convertToNative((List<ExtraInfo>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<List<Lesson>, List<ExtraInfo>>> getListPage(BigInteger begin, BigInteger end) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETLISTPAGE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(begin),
                        new org.web3j.abi.datatypes.generated.Uint256(end)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Lesson>>() {}, new TypeReference<DynamicArray<ExtraInfo>>() {}));
        return new RemoteFunctionCall<Tuple2<List<Lesson>, List<ExtraInfo>>>(function,
                new Callable<Tuple2<List<Lesson>, List<ExtraInfo>>>() {
                    @Override
                    public Tuple2<List<Lesson>, List<ExtraInfo>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<Lesson>, List<ExtraInfo>>(
                                convertToNative((List<Lesson>) results.get(0).getValue()),
                                convertToNative((List<ExtraInfo>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<Boolean> lessonInserted(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LESSONINSERTED,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> lessonKey(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LESSONKEY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple12<String, String, String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> lessons(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LESSONS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple12<String, String, String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple12<String, String, String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple12<String, String, String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple12<String, String, String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue(),
                                (BigInteger) results.get(6).getValue(),
                                (BigInteger) results.get(7).getValue(),
                                (BigInteger) results.get(8).getValue(),
                                (BigInteger) results.get(9).getValue(),
                                (BigInteger) results.get(10).getValue(),
                                (BigInteger) results.get(11).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> save(Lesson _lesson, ExtraInfo _extraInfo) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAVE,
                Arrays.<Type>asList(_lesson,
                        _extraInfo),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static LessonContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new LessonContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static LessonContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new LessonContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static LessonContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new LessonContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static LessonContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new LessonContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<LessonContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(LessonContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<LessonContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(LessonContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<LessonContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(LessonContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<LessonContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(LessonContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class Lesson extends DynamicStruct {
        public String lessonId;

        public String studentId;

        public String lessonName;

        public String openCollege;

        public BigInteger regularScore;

        public BigInteger midTermScore;

        public BigInteger finalTermScore;

        public BigInteger finalScore;

        public BigInteger credit;

        public BigInteger point;

        public BigInteger creditPoint;

        public BigInteger term;

        public Lesson(String lessonId, String studentId, String lessonName, String openCollege, BigInteger regularScore, BigInteger midTermScore, BigInteger finalTermScore, BigInteger finalScore, BigInteger credit, BigInteger point, BigInteger creditPoint, BigInteger term) {
            super(new org.web3j.abi.datatypes.Utf8String(lessonId),new org.web3j.abi.datatypes.Utf8String(studentId),new org.web3j.abi.datatypes.Utf8String(lessonName),new org.web3j.abi.datatypes.Utf8String(openCollege),new org.web3j.abi.datatypes.generated.Uint256(regularScore),new org.web3j.abi.datatypes.generated.Uint256(midTermScore),new org.web3j.abi.datatypes.generated.Uint256(finalTermScore),new org.web3j.abi.datatypes.generated.Uint256(finalScore),new org.web3j.abi.datatypes.generated.Uint256(credit),new org.web3j.abi.datatypes.generated.Uint256(point),new org.web3j.abi.datatypes.generated.Uint256(creditPoint),new org.web3j.abi.datatypes.generated.Uint256(term));
            this.lessonId = lessonId;
            this.studentId = studentId;
            this.lessonName = lessonName;
            this.openCollege = openCollege;
            this.regularScore = regularScore;
            this.midTermScore = midTermScore;
            this.finalTermScore = finalTermScore;
            this.finalScore = finalScore;
            this.credit = credit;
            this.point = point;
            this.creditPoint = creditPoint;
            this.term = term;
        }

        public Lesson(Utf8String lessonId, Utf8String studentId, Utf8String lessonName, Utf8String openCollege, Uint256 regularScore, Uint256 midTermScore, Uint256 finalTermScore, Uint256 finalScore, Uint256 credit, Uint256 point, Uint256 creditPoint, Uint256 term) {
            super(lessonId,studentId,lessonName,openCollege,regularScore,midTermScore,finalTermScore,finalScore,credit,point,creditPoint,term);
            this.lessonId = lessonId.getValue();
            this.studentId = studentId.getValue();
            this.lessonName = lessonName.getValue();
            this.openCollege = openCollege.getValue();
            this.regularScore = regularScore.getValue();
            this.midTermScore = midTermScore.getValue();
            this.finalTermScore = finalTermScore.getValue();
            this.finalScore = finalScore.getValue();
            this.credit = credit.getValue();
            this.point = point.getValue();
            this.creditPoint = creditPoint.getValue();
            this.term = term.getValue();
        }
    }

    public static class ExtraInfo extends DynamicStruct {
        public String lessonId;

        public Boolean isRetake;

        public Boolean isReExam;

        public ExtraInfo(String lessonId, Boolean isRetake, Boolean isReExam) {
            super(new org.web3j.abi.datatypes.Utf8String(lessonId),new org.web3j.abi.datatypes.Bool(isRetake),new org.web3j.abi.datatypes.Bool(isReExam));
            this.lessonId = lessonId;
            this.isRetake = isRetake;
            this.isReExam = isReExam;
        }

        public ExtraInfo(Utf8String lessonId, Bool isRetake, Bool isReExam) {
            super(lessonId,isRetake,isReExam);
            this.lessonId = lessonId.getValue();
            this.isRetake = isRetake.getValue();
            this.isReExam = isReExam.getValue();
        }
    }

    public static class DeleteMsgEventResponse extends BaseEventResponse {
        public Boolean code;
    }
}